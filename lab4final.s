        CPU     8086
        ORG     0h
InterruptVectorTable:
        ; Internal x86 Interrupts:
        dd      0 ; Reserved (Div err)  ; Int 00h
        dd      0 ; Reserved (Step)     ; Int 01h
        dd      0 ; Reserved (NMI)      ; Int 02h
        dd      0 ; Reserved (Break)    ; Int 03h
        dd      0 ; Reserved (Overflow) ; Int 04h
        dd      0                       ; Int 05h
        dd      0                       ; Int 06h
        dd      0                       ; Int 07h
        ; Hardware Interrupts:
        dd      resetISR ; Reset               ; Int 08h (IRQ 0)
        dd      tickISR ; Tick                ; Int 09h (IRQ 1)
        dd      keyboardISR ; Keyboard            ; Int 0Ah (IRQ 2)
        dd      0 ; Simptris Game Over  ; Int 0Bh (IRQ 3)
        dd      0 ; Simptris New Piece  ; Int 0Ch (IRQ 4)
        dd      0 ; Simptris Received   ; Int 0Dh (IRQ 5)
        dd      0 ; Simptris Touchdown  ; Int 0Eh (IRQ 6)
        dd      0 ; Simptris Clear      ; Int 0Fh (IRQ 7)
        ; Software Interrupts:
        dd      0 ; Reserved (PC BIOS)  ; Int 10h
        dd      0                       ; Int 11h
        dd      0                       ; Int 12h
        dd      0                       ; Int 13h
        dd      0                       ; Int 14h
        dd      0                       ; Int 15h
        dd      0                       ; Int 16h
        dd      0                       ; Int 17h
        dd      0                       ; Int 18h
        dd      0                       ; Int 19h
        dd      0                       ; Int 1Ah
        dd      0                       ; Int 1Bh
        dd      0                       ; Int 1Ch
        dd      0                       ; Int 1Dh
        dd      0                       ; Int 1Eh
        dd      0                       ; Int 1Fh
        dd      0                       ; Int 20h
        dd      0 ; Reserved (DOS)      ; Int 21h
        dd      0 ; Simptris Services   ; Int 22h
        dd      0                       ; Int 23h
        dd      0                       ; Int 24h
        dd      0                       ; Int 25h
        dd      0                       ; Int 26h
        dd      0                       ; Int 27h
        dd      0                       ; Int 28h
        dd      0                       ; Int 29h
        dd      0                       ; Int 2Ah
        dd      0                       ; Int 2Bh
        dd      0                       ; Int 2Ch
        dd      0                       ; Int 2Dh
        dd      0                       ; Int 2Eh
        dd      0                       ; Int 2Fh
KeyBuffer:                              ; Address 0xC0
        dw      0
NewPieceType:                           ; Address 0xC2
        dw      0
NewPieceID:                             ; Address 0xC4
        dw      0
NewPieceOrientation:                    ; Address 0xC6
        dw      0
NewPieceColumn:                         ; Address 0xC8
        dw      0
TouchdownID:                            ; Address 0xCA
	dw	0
ScreenBitMap0:                          ; Address 0xCC
        dw      0
ScreenBitMap1:
        dw      0
ScreenBitMap2:
        dw      0
ScreenBitMap3:
        dw      0
ScreenBitMap4:
        dw      0
ScreenBitMap5:
        dw      0
TIMES   100h-($-$$) db  0               ; Fill up to (but not including) address 100h with 0
	jmp	main
; This file contains support routines for 32-bit on the 8086.
; It is intended for use code generated by the C86 compiler.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
SR_asldiv:			; l1 /= l2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of l1	(was push3)
	push	word [bp+8]	; Push hi l2		(was push1)
	push	word [bp+6]	; Push lo l2		(was push2)
	push	word [bx+2]	; Push hi l1
	push	word [bx]	; Push lo l1
	call	SR_ldiv
	mov	bx,[bp+4]	; Restore l1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_aslmod:			; l1 %= l2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of l1	(was push3)
	push	word [bp+8]	; Push hi l2		(was push1)
	push	word [bp+6]	; Push lo l2		(was push2)
	push	word [bx+2]	; Push hi l1
	push	word [bx]	; Push lo l1
	call	SR_lmod
	mov	bx,[bp+4]	; Restore l1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_aslmul:			; l1 *= l2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of l1	(was push3)
	push	word [bp+8]	; Push hi l2		(was push1)
	push	word [bp+6]	; Push lo l2		(was push2)
	push	word [bx+2]	; Push hi l1
	push	word [bx]	; Push lo l1
	call	SR_lmul
	add	sp,8
	mov	bx,[bp+4]	; Restore l1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_aslshl:			; l1 <<= l2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of l1	(was push3)
	push	word [bp+8]	; Push hi l2		(was push1)
	push	word [bp+6]	; Push lo l2		(was push2)
	push	word [bx+2]	; Push hi l1
	push	word [bx]	; Push lo l1
	call	SR_lshl
	add	sp,8
	mov	bx,[bp+4]	; Restore l1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_aslshr:			; l1 >>= l2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of l1	(was push3)
	push	word [bp+8]	; Push hi l2		(was push1)
	push	word [bp+6]	; Push lo l2		(was push2)
	push	word [bx+2]	; Push hi l1
	push	word [bx]	; Push lo l1
	call	SR_lshr
	add	sp,8
	mov	bx,[bp+4]	; Restore l1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret


SR_asuldiv:			; u1 /= u2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of u1	(was push3)
	push	word [bp+8]	; Push hi u2		(was push1)
	push	word [bp+6]	; Push lo u2		(was push2)
	push	word [bx+2]	; Push hi u1
	push	word [bx]	; Push lo u1
	call	SR_uldiv
	mov	bx,[bp+4]	; Restore u1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_asilmod:			; u1 %= u2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of u1	(was push3)
	push	word [bp+8]	; Push hi u2		(was push1)
	push	word [bp+6]	; Push lo u2		(was push2)
	push	word [bx+2]	; Push hi u1
	push	word [bx]	; Push lo u1
	call	SR_ilmod
	mov	bx,[bp+4]	; Restore u1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_asulmul:			; u1 *= u2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of u1	(was push3)
	push	word [bp+8]	; Push hi u2		(was push1)
	push	word [bp+6]	; Push lo u2		(was push2)
	push	word [bx+2]	; Push hi u1
	push	word [bx]	; Push lo u1
	call	SR_ulmul
	add	sp,8
	mov	bx,[bp+4]	; Restore u1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_asulshl:			; u1 << u2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of u1	(was push3)
	push	word [bp+8]	; Push hi u2		(was push1)
	push	word [bp+6]	; Push lo u2		(was push2)
	push	word [bx+2]	; Push hi u1
	push	word [bx]	; Push lo u1
	call	SR_ulshl
	add	sp,8
	mov	bx,[bp+4]	; Restore u1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_asulshr:			; u1 >> u2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of u1	(was push3)
	push	word [bp+8]	; Push hi u2		(was push1)
	push	word [bp+6]	; Push lo u2		(was push2)
	push	word [bx+2]	; Push hi u1
	push	word [bx]	; Push lo u1
	call	SR_ulshr
	add	sp,8
	mov	bx,[bp+4]	; Restore u1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret


; Main 32-bit routines begin here:

SR_ldiv:	; N_LDIV@
	pop    cx
	push   cs
	push   cx
	; LDIV@
	xor    cx,cx
	jmp    LSR_01
SR_uldiv:	; N_LUDIV@
	pop    cx
	push   cs
	push   cx
	; F_LUDIV@
	mov    cx,0001
	jmp    LSR_01
SR_lmod:	; N_LMOD@
	pop    cx
	push   cs
	push   cx
	; F_LMOD@
	mov    cx,0002
	jmp    LSR_01
SR_ilmod:	; N_LUMOD@
	pop    cx
	push   cs
	push   cx
	; LUMOD@
	mov    cx,0003
LSR_01:
	push   bp
	push   si
	push   di
	mov    bp,sp
	mov    di,cx
	mov    ax,[bp+0Ah]
	mov    dx,[bp+0Ch]
	mov    bx,[bp+0Eh]
	mov    cx,[bp+10h]
	or     cx,cx
	jne    LSR_02
	or     dx,dx
	je     LSR_10
	or     bx,bx
	je     LSR_10
LSR_02:
	test   di,0001
	jne    LSR_04
	or     dx,dx
	jns    LSR_03
	neg    dx
	neg    ax
	sbb    dx,0000
	or     di,000Ch
LSR_03:
	or     cx,cx
	jns    LSR_04
	neg    cx
	neg    bx
	sbb    cx,0000
	xor    di,0004
LSR_04:
	mov    bp,cx
	mov    cx,0020h
	push   di
	xor    di,di
	xor    si,si
LSR_05:
	shl    ax,1
	rcl    dx,1
	rcl    si,1
	rcl    di,1
	cmp    di,bp
	jb     LSR_07
	ja     LSR_06
	cmp    si,bx
	jb     LSR_07
LSR_06:
	sub    si,bx
	sbb    di,bp
	inc    ax
LSR_07:
	loop   LSR_05
	pop    bx
	test   bx,0002
	je     LSR_08
	mov    ax,si
	mov    dx,di
	shr    bx,1
LSR_08:
	test   bx,0004h
	je     LSR_09
	neg    dx
	neg    ax
	sbb    dx,0000
LSR_09:
	pop    di
	pop    si
	pop    bp
	retf   0008
LSR_10:
	div    bx
	test   di,0002
	je     LSR_11
	xchg   dx,ax
LSR_11:
	xor    dx,dx
	jmp    LSR_09
SR_lshl:	; N_LXLSH@
SR_ulshl:
	; r = a << b
	pop    bx
	push   cs
	push   bx

	push   bp
	mov    bp,sp

	push   cx	; C86 doesn't expect use of cx or bx

	mov    ax, [bp+6]	; pop loword(a)
	mov    dx, [bp+8]	; pop hiword(a)
	mov    cx, [bp+10]	; pop word(b)
	
	; LXLSH@
	cmp    cl,10h
	jnb    LSR_12
	mov    bx,ax
	shl    ax,cl
	shl    dx,cl
	neg    cl
	add    cl,10h
	shr    bx,cl
	or     dx,bx
	pop    cx
	pop    bp
	retf
LSR_12:
	sub    cl,10h
	xchg   dx,ax
	xor    ax,ax
	shl    dx,cl
	pop    cx
	pop    bp
	retf
SR_lshr:	; N_LXRSH@
	; r = a >> b
	pop    bx
	push   cs
	push   bx

	push   bp
	mov    bp,sp

	push   cx	; C86 doesn't expect use of cx or bx

        mov    ax, [bp+6]	; pop loword(a)
	mov    dx, [bp+8]	; pop hiword(a)
	mov    cx, [bp+10]	; pop word(b)
	
	; LXRSH@
	cmp    cl,10h
	jnb    LSR_13
	mov    bx,dx
	shr    ax,cl
	sar    dx,cl
	neg    cl
	add    cl,10h
	shl    bx,cl
	or     ax,bx
	pop    cx
	pop    bp
	retf
LSR_13:
	sub    cl,10h
	xchg   dx,ax
	cwd
	sar    ax,cl
	pop    cx
	pop    bp
	retf
SR_ulshr:	; N_LXURSH@
	; r = a >> b
	pop    bx
	push   cs
	push   bx

	push   bp
	mov    bp,sp

	push   cx	; C86 doesn't expect use of cx or bx

        mov    ax, [bp+6]	; pop loword(a)
	mov    dx, [bp+8]	; pop hiword(a)
	mov    cx, [bp+10]	; pop word(b)
	
	; LXURSH@
	cmp    cl,10h
	jnb    LSR_14
	mov    bx,dx
	shr    ax,cl
	shr    dx,cl
	neg    cl
	add    cl,10h
	shl    bx,cl
	or     ax,bx
	pop    cx
	pop    bp
	retf
LSR_14:
	sub    cl,10h
	xchg   dx,ax
	xor    dx,dx
	shr    ax,cl
	pop    cx
	pop    bp
	retf
SR_lmul:	; N_LXMUL@
SR_ulmul:
	; r = a * b
	push   bp
	push   si
	mov    bp,sp

	push   cx	; C86 doesn't expect use of cx or bx
	push   bx

        mov    bx, [bp+6]	; pop loword(a)
	mov    cx, [bp+8]	; pop hiword(a)
	mov    ax, [bp+10]	; pop loword(b)
	mov    dx, [bp+12]	; pop hiword(b)
	
	xchg   si,ax
	xchg   dx,ax
	test   ax,ax
	je     LSR_15
	mul    bx
LSR_15:
	jcxz   LSR_16
	xchg   cx,ax
	mul    si
	add    ax,cx
LSR_16:
	xchg   si,ax
	mul    bx
	add    dx,si
	pop    bx
	pop    cx
	pop    si
	pop    bp
	ret

; Generated by c86 (BYU-NASM) 5.1 (beta) from clib.c
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
new_line:
	db	13,10,36
	ALIGN	2
signalEOI:
	jmp	L_clib_1
L_clib_2:
	mov	al, 0x20
	out	0x20, al
	mov	sp, bp
	pop	bp
	ret
L_clib_1:
	push	bp
	mov	bp, sp
	jmp	L_clib_2
	ALIGN	2
exit:
	jmp	L_clib_4
L_clib_5:
	mov	ah, 4Ch
	mov	al, [bp+4]
	int	21h
	mov	sp, bp
	pop	bp
	ret
L_clib_4:
	push	bp
	mov	bp, sp
	jmp	L_clib_5
	ALIGN	2
print:
	jmp	L_clib_7
L_clib_8:
	mov	ah, 40h
	mov	bx, 1
	mov	cx, [bp+6]
	mov	dx, [bp+4]
	int	21h
	mov	sp, bp
	pop	bp
	ret
L_clib_7:
	push	bp
	mov	bp, sp
	jmp	L_clib_8
	ALIGN	2
printChar:
	jmp	L_clib_10
L_clib_11:
	mov	ah, 2
	mov	dl, [bp+4]
	int	21h
	mov	sp, bp
	pop	bp
	ret
L_clib_10:
	push	bp
	mov	bp, sp
	jmp	L_clib_11
	ALIGN	2
printNewLine:
	jmp	L_clib_13
L_clib_14:
	mov	ah, 9
	mov	dx, new_line
	int	21h
	mov	sp, bp
	pop	bp
	ret
L_clib_13:
	push	bp
	mov	bp, sp
	jmp	L_clib_14
	ALIGN	2
printString:
	jmp	L_clib_16
L_clib_17:
	xor	si,si
	mov	bx, [bp+4]
	jmp	printString2
	printString1:
	inc	si
	printString2:
	cmp	byte [bx+si],0
	jne	printString1
	mov	dx, bx
	mov	cx, si
	mov	ah, 40h
	mov	bx, 1
	int	21h
	mov	sp, bp
	pop	bp
	ret
L_clib_16:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_clib_17
	ALIGN	2
printInt:
	jmp	L_clib_19
L_clib_20:
	mov	word [bp-2], 0
	mov	word [bp-4], 10000
	cmp	word [bp+4], 0
	jge	L_clib_21
	mov	byte [bp-10], 45
	inc	word [bp-2]
	mov	ax, word [bp+4]
	neg	ax
	mov	word [bp+4], ax
L_clib_21:
	mov	ax, word [bp+4]
	test	ax, ax
	jne	L_clib_22
	mov	word [bp-4], 1
	jmp	L_clib_23
L_clib_22:
	jmp	L_clib_25
L_clib_24:
	mov	ax, word [bp-4]
	cwd
	mov	cx, 10
	idiv	cx
	mov	word [bp-4], ax
L_clib_25:
	mov	ax, word [bp+4]
	cwd
	idiv	word [bp-4]
	test	ax, ax
	je	L_clib_24
L_clib_26:
L_clib_23:
	jmp	L_clib_28
L_clib_27:
	mov	ax, word [bp+4]
	xor	dx, dx
	div	word [bp-4]
	add	al, 48
	mov	si, word [bp-2]
	lea	dx, [bp-10]
	add	si, dx
	mov	byte [si], al
	inc	word [bp-2]
	mov	ax, word [bp+4]
	xor	dx, dx
	div	word [bp-4]
	mov	ax, dx
	mov	word [bp+4], ax
	mov	ax, word [bp-4]
	cwd
	mov	cx, 10
	idiv	cx
	mov	word [bp-4], ax
	mov	ax, word [bp-4]
	mov	word [bp-4], ax
L_clib_28:
	cmp	word [bp-4], 0
	jg	L_clib_27
L_clib_29:
	push	word [bp-2]
	lea	ax, [bp-10]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_19:
	push	bp
	mov	bp, sp
	sub	sp, 10
	jmp	L_clib_20
	ALIGN	2
printLong:
	jmp	L_clib_31
L_clib_32:
	mov	word [bp-2], 0
	mov	word [bp-6], 51712
	mov	word [bp-4], 15258
	cmp	word [bp+6], 0
	jg	L_clib_33
	jl	L_clib_34
	cmp	word [bp+4], 0
	jae	L_clib_33
L_clib_34:
	mov	byte [bp-17], 45
	inc	word [bp-2]
	mov	ax, word [bp+4]
	mov	dx, word [bp+6]
	neg	ax
	adc	dx, 0
	neg	dx
	mov	word [bp+4], ax
	mov	word [bp+6], dx
L_clib_33:
	mov	ax, word [bp+4]
	mov	dx, word [bp+6]
	or	dx, ax
	jne	L_clib_35
	mov	word [bp-6], 1
	mov	word [bp-4], 0
	jmp	L_clib_36
L_clib_35:
	jmp	L_clib_38
L_clib_37:
	mov	ax, 10
	xor	dx, dx
	push	dx
	push	ax
	lea	ax, [bp-6]
	push	ax
	call	SR_asldiv
L_clib_38:
	push	word [bp-4]
	push	word [bp-6]
	push	word [bp+6]
	push	word [bp+4]
	call	SR_ldiv
	or	dx, ax
	je	L_clib_37
L_clib_39:
L_clib_36:
	jmp	L_clib_41
L_clib_40:
	push	word [bp-4]
	push	word [bp-6]
	push	word [bp+6]
	push	word [bp+4]
	call	SR_uldiv
	add	al, 48
	mov	si, word [bp-2]
	lea	dx, [bp-17]
	add	si, dx
	mov	byte [si], al
	inc	word [bp-2]
	push	word [bp-4]
	push	word [bp-6]
	push	word [bp+6]
	push	word [bp+4]
	call	SR_lmod
	mov	word [bp+4], ax
	mov	word [bp+6], dx
	mov	ax, 10
	xor	dx, dx
	push	dx
	push	ax
	lea	ax, [bp-6]
	push	ax
	call	SR_asldiv
L_clib_41:
	cmp	word [bp-4], 0
	jg	L_clib_40
	jne	L_clib_43
	cmp	word [bp-6], 0
	ja	L_clib_40
L_clib_43:
L_clib_42:
	push	word [bp-2]
	lea	ax, [bp-17]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_31:
	push	bp
	mov	bp, sp
	sub	sp, 18
	jmp	L_clib_32
	ALIGN	2
printUInt:
	jmp	L_clib_45
L_clib_46:
	mov	word [bp-2], 0
	mov	word [bp-4], 10000
	mov	ax, word [bp+4]
	test	ax, ax
	jne	L_clib_47
	mov	word [bp-4], 1
	jmp	L_clib_48
L_clib_47:
	jmp	L_clib_50
L_clib_49:
	mov	ax, word [bp-4]
	xor	dx, dx
	mov	cx, 10
	div	cx
	mov	word [bp-4], ax
L_clib_50:
	mov	ax, word [bp+4]
	xor	dx, dx
	div	word [bp-4]
	test	ax, ax
	je	L_clib_49
L_clib_51:
L_clib_48:
	jmp	L_clib_53
L_clib_52:
	mov	ax, word [bp+4]
	xor	dx, dx
	div	word [bp-4]
	add	al, 48
	mov	si, word [bp-2]
	lea	dx, [bp-10]
	add	si, dx
	mov	byte [si], al
	inc	word [bp-2]
	mov	ax, word [bp+4]
	xor	dx, dx
	div	word [bp-4]
	mov	word [bp+4], dx
	mov	ax, word [bp-4]
	xor	dx, dx
	mov	cx, 10
	div	cx
	mov	word [bp-4], ax
L_clib_53:
	mov	ax, word [bp-4]
	test	ax, ax
	jne	L_clib_52
L_clib_54:
	push	word [bp-2]
	lea	ax, [bp-10]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_45:
	push	bp
	mov	bp, sp
	sub	sp, 10
	jmp	L_clib_46
	ALIGN	2
printULong:
	jmp	L_clib_56
L_clib_57:
	mov	word [bp-2], 0
	mov	word [bp-6], 51712
	mov	word [bp-4], 15258
	mov	ax, word [bp+4]
	mov	dx, word [bp+6]
	or	dx, ax
	jne	L_clib_58
	mov	word [bp-6], 1
	mov	word [bp-4], 0
	jmp	L_clib_59
L_clib_58:
	jmp	L_clib_61
L_clib_60:
	mov	ax, 10
	xor	dx, dx
	push	dx
	push	ax
	lea	ax, [bp-6]
	push	ax
	call	SR_asuldiv
L_clib_61:
	push	word [bp-4]
	push	word [bp-6]
	push	word [bp+6]
	push	word [bp+4]
	call	SR_uldiv
	or	dx, ax
	je	L_clib_60
L_clib_62:
L_clib_59:
	jmp	L_clib_64
L_clib_63:
	push	word [bp-4]
	push	word [bp-6]
	push	word [bp+6]
	push	word [bp+4]
	call	SR_uldiv
	add	al, 48
	mov	si, word [bp-2]
	lea	dx, [bp-17]
	add	si, dx
	mov	byte [si], al
	inc	word [bp-2]
	push	word [bp-4]
	push	word [bp-6]
	lea	ax, [bp+4]
	push	ax
	call	SR_asilmod
	mov	ax, 10
	xor	dx, dx
	push	dx
	push	ax
	lea	ax, [bp-6]
	push	ax
	call	SR_asuldiv
L_clib_64:
	mov	ax, word [bp-6]
	mov	dx, word [bp-4]
	or	dx, ax
	jne	L_clib_63
L_clib_65:
	push	word [bp-2]
	lea	ax, [bp-17]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_56:
	push	bp
	mov	bp, sp
	sub	sp, 18
	jmp	L_clib_57
	ALIGN	2
printByte:
	jmp	L_clib_67
L_clib_68:
	mov	al, byte [bp+4]
	cbw
	mov	cx, 4
	sar	ax, cl
	and	ax, 15
	mov	byte [bp-1], al
	cmp	byte [bp-1], 9
	jle	L_clib_69
	mov	al, byte [bp-1]
	cbw
	sub	ax, 10
	add	ax, 65
	jmp	L_clib_70
L_clib_69:
	mov	al, byte [bp-1]
	cbw
	add	ax, 48
L_clib_70:
	mov	byte [bp-3], al
	mov	al, byte [bp+4]
	and	al, 15
	mov	byte [bp-1], al
	cmp	byte [bp-1], 9
	jle	L_clib_71
	mov	al, byte [bp-1]
	cbw
	sub	ax, 10
	add	ax, 65
	jmp	L_clib_72
L_clib_71:
	mov	al, byte [bp-1]
	cbw
	add	ax, 48
L_clib_72:
	mov	byte [bp-2], al
	mov	ax, 2
	push	ax
	lea	ax, [bp-3]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_67:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_clib_68
	ALIGN	2
printWord:
	jmp	L_clib_74
L_clib_75:
	mov	word [bp-2], 3
	jmp	L_clib_77
L_clib_76:
	mov	ax, word [bp+4]
	and	ax, 15
	mov	byte [bp-3], al
	cmp	byte [bp-3], 9
	jle	L_clib_80
	mov	al, byte [bp-3]
	cbw
	sub	ax, 10
	add	ax, 65
	jmp	L_clib_81
L_clib_80:
	mov	al, byte [bp-3]
	cbw
	add	ax, 48
L_clib_81:
	mov	si, word [bp-2]
	lea	dx, [bp-7]
	add	si, dx
	mov	byte [si], al
	mov	ax, word [bp+4]
	mov	cx, 4
	sar	ax, cl
	mov	word [bp+4], ax
L_clib_79:
	dec	word [bp-2]
L_clib_77:
	cmp	word [bp-2], 0
	jge	L_clib_76
L_clib_78:
	mov	ax, 4
	push	ax
	lea	ax, [bp-7]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_74:
	push	bp
	mov	bp, sp
	sub	sp, 8
	jmp	L_clib_75
	ALIGN	2
printDWord:
	jmp	L_clib_83
L_clib_84:
	lea	ax, [bp+4]
	mov	si, ax
	mov	ax, word [si]
	mov	word [bp-6], ax
	lea	ax, [bp+4]
	mov	si, ax
	add	si, 2
	mov	ax, word [si]
	mov	word [bp-8], ax
	mov	word [bp-2], 3
	jmp	L_clib_86
L_clib_85:
	mov	ax, word [bp-6]
	and	ax, 15
	mov	byte [bp-3], al
	cmp	byte [bp-3], 9
	jle	L_clib_89
	mov	al, byte [bp-3]
	cbw
	sub	ax, 10
	add	ax, 65
	jmp	L_clib_90
L_clib_89:
	mov	al, byte [bp-3]
	cbw
	add	ax, 48
L_clib_90:
	mov	dx, word [bp-2]
	add	dx, 4
	mov	si, dx
	lea	dx, [bp-16]
	add	si, dx
	mov	byte [si], al
	mov	ax, word [bp-6]
	mov	cx, 4
	sar	ax, cl
	mov	word [bp-6], ax
	mov	ax, word [bp-8]
	and	ax, 15
	mov	byte [bp-3], al
	cmp	byte [bp-3], 9
	jle	L_clib_91
	mov	al, byte [bp-3]
	cbw
	sub	ax, 10
	add	ax, 65
	jmp	L_clib_92
L_clib_91:
	mov	al, byte [bp-3]
	cbw
	add	ax, 48
L_clib_92:
	mov	si, word [bp-2]
	lea	dx, [bp-16]
	add	si, dx
	mov	byte [si], al
	mov	ax, word [bp-8]
	mov	cx, 4
	sar	ax, cl
	mov	word [bp-8], ax
L_clib_88:
	dec	word [bp-2]
L_clib_86:
	cmp	word [bp-2], 0
	jge	L_clib_85
L_clib_87:
	mov	ax, 8
	push	ax
	lea	ax, [bp-16]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_83:
	push	bp
	mov	bp, sp
	sub	sp, 16
	jmp	L_clib_84

resetISR:
	call resetISRC
	
tickISR:

	push ax
	push bx
	push cx
	push dx
	push si
	push di
	push bp
	push es
	push ds


	call YKEnterISR

	sti
	call tickISRC
	call YKTickHandler
	cli
	
	mov	al, 0x20	; Load nonspecific EOI value (0x20) into register al
	out	0x20, al	; Write EOI to PIC (port 0x20)

	call YKExitISR
	
	pop ds
	pop es
	pop bp
	pop di
	pop si
	pop dx
	pop cx
	pop bx
	pop ax

	iret

YKRet:	
	pop cx
	mov	al, 0x20	; Load nonspecific EOI value (0x20) into register al
	out	0x20, al	; Write EOI to PIC (port 0x20)
	iret

keyboardISR:

	push ax
	push bx
	push cx
	push dx
	push si
	push di
	push bp
	push es
	push ds


	call YKEnterISR

	sti
	call keyboardISRC
	cli
	
	mov	al, 0x20	; Load nonspecific EOI value (0x20) into register al
	out	0x20, al	; Write EOI to PIC (port 0x20)
	

	call YKExitISR

	pop ds
	pop es
	pop bp
	pop di
	pop si
	pop dx
	pop cx
	pop bx
	pop ax

	iret


; Generated by c86 (BYU-NASM) 5.1 (beta) from myinth.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
L_myinth_1:
	DB	"RESET",0
	ALIGN	2
resetISRC:
	; >>>>> Line:	7
	; >>>>> { 
	jmp	L_myinth_2
L_myinth_3:
	; >>>>> Line:	8
	; >>>>> printString("RESET"); 
	mov	ax, L_myinth_1
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	9
	; >>>>> exit(0); 
	xor	al, al
	push	ax
	call	exit
	add	sp, 2
	mov	sp, bp
	pop	bp
	ret
L_myinth_2:
	push	bp
	mov	bp, sp
	jmp	L_myinth_3
	ALIGN	2
tickISRC:
	; >>>>> Line:	13
	; >>>>> { 
	jmp	L_myinth_5
L_myinth_6:
	; >>>>> Line:	16
	; >>>>> } 
	mov	sp, bp
	pop	bp
	ret
L_myinth_5:
	push	bp
	mov	bp, sp
	jmp	L_myinth_6
L_myinth_9:
	DB	") IGNORED",0xA,0
L_myinth_8:
	DB	0xA,"KEYPRESS (",0
	ALIGN	2
keyboardISRC:
	; >>>>> Line:	19
	; >>>>> { 
	jmp	L_myinth_10
L_myinth_11:
	; >>>>> Line:	21
	; >>>>> c = KeyBuffer; 
	mov	al, byte [KeyBuffer]
	mov	byte [bp-1], al
	; >>>>> Line:	23
	; >>>>> if(c == 'a') YKEventSet(charEvent, 0x1); 
	cmp	byte [bp-1], 97
	jne	L_myinth_12
	; >>>>> Line:	23
	; >>>>> if(c == 'a') YKEventSet(charEvent, 0x1); 
	mov	ax, 1
	push	ax
	push	word [charEvent]
	call	YKEventSet
	add	sp, 4
	jmp	L_myinth_13
L_myinth_12:
	; >>>>> Line:	24
	; >>>>> else if(c == 'b') YKEventSet(charEvent, 0x2); 
	cmp	byte [bp-1], 98
	jne	L_myinth_14
	; >>>>> Line:	24
	; >>>>> else if(c == 'b') YKEventSet(charEvent, 0x2); 
	mov	ax, 2
	push	ax
	push	word [charEvent]
	call	YKEventSet
	add	sp, 4
	jmp	L_myinth_15
L_myinth_14:
	; >>>>> Line:	25
	; >>>>> else if(c == 'c') YKEventSet(charEvent, 0x4); 
	cmp	byte [bp-1], 99
	jne	L_myinth_16
	; >>>>> Line:	25
	; >>>>> else if(c == 'c') YKEventSet(charEvent, 0x4); 
	mov	ax, 4
	push	ax
	push	word [charEvent]
	call	YKEventSet
	add	sp, 4
	jmp	L_myinth_17
L_myinth_16:
	; >>>>> Line:	26
	; >>>>> else if(c == 'd') YKEventSet(charEvent, 0x1 | 0x2 | 0x4); 
	cmp	byte [bp-1], 100
	jne	L_myinth_18
	; >>>>> Line:	26
	; >>>>> else if(c == 'd') YKEventSet(charEvent, 0x1 | 0x2 | 0x4); 
	mov	ax, 7
	push	ax
	push	word [charEvent]
	call	YKEventSet
	add	sp, 4
	jmp	L_myinth_19
L_myinth_18:
	; >>>>> Line:	27
	; >>>>> else if(c == '1') YKEventSet(numEvent, 0x1); 
	cmp	byte [bp-1], 49
	jne	L_myinth_20
	; >>>>> Line:	27
	; >>>>> else if(c == '1') YKEventSet(numEvent, 0x1); 
	mov	ax, 1
	push	ax
	push	word [numEvent]
	call	YKEventSet
	add	sp, 4
	jmp	L_myinth_21
L_myinth_20:
	; >>>>> Line:	28
	; >>>>> else if(c == '2') YKEventSet(numEvent, 0x2); 
	cmp	byte [bp-1], 50
	jne	L_myinth_22
	; >>>>> Line:	28
	; >>>>> else if(c == '2') YKEventSet(numEvent, 0x2); 
	mov	ax, 2
	push	ax
	push	word [numEvent]
	call	YKEventSet
	add	sp, 4
	jmp	L_myinth_23
L_myinth_22:
	; >>>>> Line:	29
	; >>>>> else if(c == '3') YKEventSet(numEvent, 0x4); 
	cmp	byte [bp-1], 51
	jne	L_myinth_24
	; >>>>> Line:	29
	; >>>>> else if(c == '3') YKEventSet(numEvent, 0x4); 
	mov	ax, 4
	push	ax
	push	word [numEvent]
	call	YKEventSet
	add	sp, 4
	jmp	L_myinth_25
L_myinth_24:
	; >>>>> Line:	31
	; >>>>> print("\nKEYPRESS (", 11); 
	mov	ax, 11
	push	ax
	mov	ax, L_myinth_8
	push	ax
	call	print
	add	sp, 4
	; >>>>> Line:	32
	; >>>>> printChar(c); 
	push	word [bp-1]
	call	printChar
	add	sp, 2
	; >>>>> Line:	33
	; >>>>> print(") IGNORED\n", 10); 
	mov	ax, 10
	push	ax
	mov	ax, L_myinth_9
	push	ax
	call	print
	add	sp, 4
L_myinth_25:
L_myinth_23:
L_myinth_21:
L_myinth_19:
L_myinth_17:
L_myinth_15:
L_myinth_13:
	mov	sp, bp
	pop	bp
	ret
L_myinth_10:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_myinth_11
; Generated by c86 (BYU-NASM) 5.1 (beta) from lab4_app.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
L_lab4_app_5:
	DB	"CharTask     (C)",0xA,0
L_lab4_app_4:
	DB	"CharTask     (B)",0xA,0
L_lab4_app_3:
	DB	"CharTask     (A)",0xA,0
L_lab4_app_2:
	DB	"Oops! At least one event should be set in return value!",0xA,0
L_lab4_app_1:
	DB	"Started CharTask     (2)",0xA,0
	ALIGN	2
CharTask:
	; >>>>> Line:	26
	; >>>>> { 
	jmp	L_lab4_app_6
L_lab4_app_7:
	; >>>>> Line:	29
	; >>>>> printString("Started CharTask     (2)\n"); 
	mov	ax, L_lab4_app_1
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	31
	; >>>>> while(1) { 
	jmp	L_lab4_app_9
L_lab4_app_8:
	; >>>>> Line:	32
	; >>>>> events = YKEventPend(charEvent, 
	xor	ax, ax
	push	ax
	mov	ax, 7
	push	ax
	push	word [charEvent]
	call	YKEventPend
	add	sp, 6
	mov	word [bp-2], ax
	; >>>>> Line:	36
	; >>>>> if(events == 0) { 
	mov	ax, word [bp-2]
	test	ax, ax
	jne	L_lab4_app_11
	; >>>>> Line:	37
	; >>>>> printString("Oops! At least one event should be set " 
	mov	ax, L_lab4_app_2
	push	ax
	call	printString
	add	sp, 2
L_lab4_app_11:
	; >>>>> Line:	41
	; >>>>> if(events & 0x1) { 
	mov	ax, word [bp-2]
	and	ax, 1
	je	L_lab4_app_12
	; >>>>> Line:	42
	; >>>>> printString("CharTask     (A)\n"); 
	mov	ax, L_lab4_app_3
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	43
	; >>>>> YKEventReset(charEvent, 0x1); 
	mov	ax, 1
	push	ax
	push	word [charEvent]
	call	YKEventReset
	add	sp, 4
L_lab4_app_12:
	; >>>>> Line:	46
	; >>>>> if(events & 0x2) { 
	mov	ax, word [bp-2]
	and	ax, 2
	je	L_lab4_app_13
	; >>>>> Line:	47
	; >>>>> printString("CharTask     (B)\n"); 
	mov	ax, L_lab4_app_4
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	48
	; >>>>> YKEventReset(charEvent, 0x2); 
	mov	ax, 2
	push	ax
	push	word [charEvent]
	call	YKEventReset
	add	sp, 4
L_lab4_app_13:
	; >>>>> Line:	51
	; >>>>> if(events & 0x4) { 
	mov	ax, word [bp-2]
	and	ax, 4
	je	L_lab4_app_14
	; >>>>> Line:	52
	; >>>>> printString("CharTask     (C)\n"); 
	mov	ax, L_lab4_app_5
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	53
	; >>>>> YKEventReset(charEvent, 0x4); 
	mov	ax, 4
	push	ax
	push	word [charEvent]
	call	YKEventReset
	add	sp, 4
L_lab4_app_14:
L_lab4_app_9:
	jmp	L_lab4_app_8
L_lab4_app_10:
	mov	sp, bp
	pop	bp
	ret
L_lab4_app_6:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_lab4_app_7
L_lab4_app_18:
	DB	"AllCharsTask (D)",0xA,0
L_lab4_app_17:
	DB	"Oops! Char events weren't reset by CharTask!",0xA,0
L_lab4_app_16:
	DB	"Started AllCharsTask (3)",0xA,0
	ALIGN	2
AllCharsTask:
	; >>>>> Line:	60
	; >>>>> { 
	jmp	L_lab4_app_19
L_lab4_app_20:
	; >>>>> Line:	63
	; >>>>> printString("Started AllChars 
	mov	ax, L_lab4_app_16
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	65
	; >>>>> while(1) { 
	jmp	L_lab4_app_22
L_lab4_app_21:
	; >>>>> Line:	66
	; >>>>> events = YKEventPend(charEvent, 
	mov	ax, 1
	push	ax
	mov	ax, 7
	push	ax
	push	word [charEvent]
	call	YKEventPend
	add	sp, 6
	mov	word [bp-2], ax
	; >>>>> Line:	71
	; >>>>> if(events != 0) { 
	mov	ax, word [bp-2]
	test	ax, ax
	je	L_lab4_app_24
	; >>>>> Line:	72
	; >>>>> printString("Oops! Char events weren't reset by CharTask!\n"); 
	mov	ax, L_lab4_app_17
	push	ax
	call	printString
	add	sp, 2
L_lab4_app_24:
	; >>>>> Line:	75
	; >>>>> printString("AllCharsTask (D)\n"); 
	mov	ax, L_lab4_app_18
	push	ax
	call	printString
	add	sp, 2
L_lab4_app_22:
	jmp	L_lab4_app_21
L_lab4_app_23:
	mov	sp, bp
	pop	bp
	ret
L_lab4_app_19:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_lab4_app_20
L_lab4_app_28:
	DB	"AllNumsTask  (123)",0xA,0
L_lab4_app_27:
	DB	"Oops! All events should be set in return value!",0xA,0
L_lab4_app_26:
	DB	"Started AllNumsTask  (1)",0xA,0
	ALIGN	2
AllNumsTask:
	; >>>>> Line:	81
	; >>>>> { 
	jmp	L_lab4_app_29
L_lab4_app_30:
	; >>>>> Line:	84
	; >>>>> printString("Started AllNumsTask  (1)\n"); 
	mov	ax, L_lab4_app_26
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	86
	; >>>>> while(1) { 
	jmp	L_lab4_app_32
L_lab4_app_31:
	; >>>>> Line:	87
	; >>>>> events = YKEventPend(numEvent, 
	mov	ax, 1
	push	ax
	mov	ax, 7
	push	ax
	push	word [numEvent]
	call	YKEventPend
	add	sp, 6
	mov	word [bp-2], ax
	; >>>>> Line:	91
	; >>>>> if(events != (0x1 | 0x2 | 0x4)) { 
	cmp	word [bp-2], 7
	je	L_lab4_app_34
	; >>>>> Line:	92
	; >>>>> printString("Oops! All events should be set in return value!\n"); 
	mov	ax, L_lab4_app_27
	push	ax
	call	printString
	add	sp, 2
L_lab4_app_34:
	; >>>>> Line:	95
	; >>>>> printString("AllNumsTask  (123)\n"); 
	mov	ax, L_lab4_app_28
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	97
	; >>>>> YKEventReset(numEvent, 0x1 | 0x2 | 0x4); 
	mov	ax, 7
	push	ax
	push	word [numEvent]
	call	YKEventReset
	add	sp, 4
L_lab4_app_32:
	jmp	L_lab4_app_31
L_lab4_app_33:
	mov	sp, bp
	pop	bp
	ret
L_lab4_app_29:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_lab4_app_30
L_lab4_app_40:
	DB	"% >>>>>",0xD,0xA,0
L_lab4_app_39:
	DB	", CPU usage: ",0
L_lab4_app_38:
	DB	"<<<<< Context switches: ",0
L_lab4_app_37:
	DB	"Determining CPU capacity",0xD,0xA,0
L_lab4_app_36:
	DB	"Welcome to the YAK kernel",0xD,0xA,0
	ALIGN	2
STask:
	; >>>>> Line:	103
	; >>>>> { 
	jmp	L_lab4_app_41
L_lab4_app_42:
	; >>>>> Line:	107
	; >>>>> YKDelayTask(1); 
	mov	ax, 1
	push	ax
	call	YKDelayTask
	add	sp, 2
	; >>>>> Line:	108
	; >>>>> printString("Welcome to the YAK kernel\r\n"); 
	mov	ax, L_lab4_app_36
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	109
	; >>>>> printString("Determining CPU capacity\r\n"); 
	mov	ax, L_lab4_app_37
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	110
	; >>>>> YKDelayTask(1); 
	mov	ax, 1
	push	ax
	call	YKDelayTask
	add	sp, 2
	; >>>>> Line:	111
	; >>>>> YKIdleCount = 0; 
	mov	word [YKIdleCount], 0
	; >>>>> Line:	112
	; >>>>> tInt((int)sw 
	mov	ax, 5
	push	ax
	call	YKDelayTask
	add	sp, 2
	; >>>>> Line:	113
	; >>>>> max = (YKIdleCount)/25; 
	mov	ax, word [YKIdleCount]
	xor	dx, dx
	mov	cx, 25
	div	cx
	mov	word [bp-2], ax
	; >>>>> Line:	114
	; >>>>> YKIdleCount = 0; 
	mov	word [YKIdleCount], 0
	; >>>>> Line:	117
	; >>>>> YKNewTask(CharTask, (void *) &CharTaskStk[512], 2); 
	mov	ax, 2
	push	ax
	mov	ax, (CharTaskStk+1024)
	push	ax
	mov	ax, CharTask
	push	ax
	call	YKNewTask
	add	sp, 6
	; >>>>> Line:	118
	; >>>>> YKNewTask(AllNumsTask, (void *) &AllNumsTaskStk[512], 1); 
	mov	ax, 1
	push	ax
	mov	ax, (AllNumsTaskStk+1024)
	push	ax
	mov	ax, AllNumsTask
	push	ax
	call	YKNewTask
	add	sp, 6
	; >>>>> Line:	119
	; >>>>> YKNewTask(AllCharsTask, (void *) &AllCharsTaskStk[512], 3); 
	mov	ax, 3
	push	ax
	mov	ax, (AllCharsTaskStk+1024)
	push	ax
	mov	ax, AllCharsTask
	push	ax
	call	YKNewTask
	add	sp, 6
	; >>>>> Line:	120
	; >>>>> while (1) 
	jmp	L_lab4_app_44
L_lab4_app_43:
	; >>>>> Line:	122
	; >>>>> YKDelayTask(20); 
	mov	ax, 20
	push	ax
	call	YKDelayTask
	add	sp, 2
	; >>>>> Line:	124
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	125
	; >>>>> switchCount = YKCtxSwCount; 
	mov	ax, word [YKCtxSwCount]
	mov	word [bp-4], ax
	; >>>>> Line:	126
	; >>>>> idleCount = YKIdleCount; 
	mov	ax, word [YKIdleCount]
	mov	word [bp-6], ax
	; >>>>> Line:	128
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	129
	; >>>>> printInt(YKIdleCount); 
	push	word [YKIdleCount]
	call	printInt
	add	sp, 2
	; >>>>> Line:	130
	; >>>>> printString("<<<<< Context switches: "); 
	mov	ax, L_lab4_app_38
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	131
	; >>>>> printInt((int)sw 
	push	word [bp-4]
	call	printInt
	add	sp, 2
	; >>>>> Line:	132
	; >>>>> printString(", CPU usage: "); 
	mov	ax, L_lab4_app_39
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	133
	; >>>>> tmp = (int) (idleCount/max); 
	mov	ax, word [bp-6]
	xor	dx, dx
	div	word [bp-2]
	mov	word [bp-8], ax
	; >>>>> Line:	134
	; >>>>> printInt(100-tmp); 
	mov	ax, 100
	sub	ax, word [bp-8]
	push	ax
	call	printInt
	add	sp, 2
	; >>>>> Line:	135
	; >>>>> printString("% >>>>>\r\n"); 
	mov	ax, L_lab4_app_40
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	137
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	138
	; >>>>> YKCtxSwCount = 0; 
	mov	word [YKCtxSwCount], 0
	; >>>>> Line:	139
	; >>>>> YKIdleCount = 0; 
	mov	word [YKIdleCount], 0
	; >>>>> Line:	140
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_lab4_app_44:
	jmp	L_lab4_app_43
L_lab4_app_45:
	mov	sp, bp
	pop	bp
	ret
L_lab4_app_41:
	push	bp
	mov	bp, sp
	sub	sp, 8
	jmp	L_lab4_app_42
	ALIGN	2
main:
	; >>>>> Line:	146
	; >>>>> { 
	jmp	L_lab4_app_47
L_lab4_app_48:
	; >>>>> Line:	147
	; >>>>> YKInitialize(); 
	call	YKInitialize
	; >>>>> Line:	149
	; >>>>> charEvent = YKEventCreate(0); 
	xor	ax, ax
	push	ax
	call	YKEventCreate
	add	sp, 2
	mov	word [charEvent], ax
	; >>>>> Line:	150
	; >>>>> numEvent = YKEventCreate(0); 
	xor	ax, ax
	push	ax
	call	YKEventCreate
	add	sp, 2
	mov	word [numEvent], ax
	; >>>>> Line:	151
	; >>>>> YKNewTask(STask, (void *) &STaskStk[512], 0); 
	xor	ax, ax
	push	ax
	mov	ax, (STaskStk+1024)
	push	ax
	mov	ax, STask
	push	ax
	call	YKNewTask
	add	sp, 6
	; >>>>> Line:	153
	; >>>>> YKRun(); 
	call	YKRun
	mov	sp, bp
	pop	bp
	ret
L_lab4_app_47:
	push	bp
	mov	bp, sp
	jmp	L_lab4_app_48
	ALIGN	2
charEvent:
	TIMES	2 db 0
numEvent:
	TIMES	2 db 0
CharTaskStk:
	TIMES	1024 db 0
AllCharsTaskStk:
	TIMES	1024 db 0
AllNumsTaskStk:
	TIMES	1024 db 0
STaskStk:
	TIMES	1024 db 0
; Generated by c86 (BYU-NASM) 5.1 (beta) from yak.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
	ALIGN	2
YKIdleCount:
	DW	0
YKSEMNextFree:
	DW	0
isRunning:
	DW	0
ISRDepth:
	DW	0
YKTickNum:
	DW	1
deltaDelay:
	DW	0
readyListHead:
	DW	0
pendingListHead:
	DW	0
delayListHead:
	DW	0
queuePendingListHead:
	DW	0
L_yak_4:
	DB	0xD,0xA,0
L_yak_3:
	DB	", ",0
L_yak_2:
	DB	" and count=",0
L_yak_1:
	DB	"id=",0
	ALIGN	2
printDelayCounts:
	; >>>>> Line:	34
	; >>>>> static void printDelayCounts(){ 
	jmp	L_yak_5
L_yak_6:
	; >>>>> Line:	36
	; >>>>> while(1){ 
	mov	ax, word [delayListHead]
	mov	word [bp-2], ax
	; >>>>> Line:	36
	; >>>>> while(1){ 
	jmp	L_yak_8
L_yak_7:
	; >>>>> Line:	37
	; >>>>> if(itr == ((void *) 0)){ 
	mov	ax, word [bp-2]
	test	ax, ax
	jne	L_yak_10
	; >>>>> Line:	38
	; >>>>> break; 
	jmp	L_yak_9
L_yak_10:
	; >>>>> Line:	41
	; >>>>> printString("id="); 
	mov	ax, L_yak_1
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	42
	; >>>>> printInt(itr->id); 
	mov	si, word [bp-2]
	add	si, 28
	push	word [si]
	call	printInt
	add	sp, 2
	; >>>>> Line:	43
	; >>>>> printString(" and count=") ; 
	mov	ax, L_yak_2
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	44
	; >>>>> printInt(itr->delayCount); 
	mov	si, word [bp-2]
	add	si, 30
	push	word [si]
	call	printInt
	add	sp, 2
	; >>>>> Line:	46
	; >>>>> printString(", ") ; 
	mov	ax, L_yak_3
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	47
	; >>>>> itr = itr->nextTCB; 
	mov	si, word [bp-2]
	add	si, 32
	mov	ax, word [si]
	mov	word [bp-2], ax
L_yak_8:
	jmp	L_yak_7
L_yak_9:
	; >>>>> Line:	49
	; >>>>> printString("\r\n") ; 
	mov	ax, L_yak_4
	push	ax
	call	printString
	add	sp, 2
	mov	sp, bp
	pop	bp
	ret
L_yak_5:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yak_6
L_yak_15:
	DB	" pri: ",0
L_yak_14:
	DB	" dc: ",0
L_yak_13:
	DB	" ip: ",0
L_yak_12:
	DB	"id: ",0
	ALIGN	2
printReadyList:
	; >>>>> Line:	55
	; >>>>> static void printReadyList(){ 
	jmp	L_yak_16
L_yak_17:
	; >>>>> Line:	57
	; >>>>> while(1){ 
	mov	ax, word [readyListHead]
	mov	word [bp-2], ax
	; >>>>> Line:	57
	; >>>>> while(1){ 
	jmp	L_yak_19
L_yak_18:
	; >>>>> Line:	58
	; >>>>> if(itr == ((void *) 0)){ 
	mov	ax, word [bp-2]
	test	ax, ax
	jne	L_yak_21
	; >>>>> Line:	59
	; >>>>>  
	jmp	L_yak_20
L_yak_21:
	; >>>>> Line:	62
	; >>>>> printString("id: "); 
	mov	ax, L_yak_12
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	63
	; >>>>> printInt(itr->id); 
	mov	si, word [bp-2]
	add	si, 28
	push	word [si]
	call	printInt
	add	sp, 2
	; >>>>> Line:	64
	; >>>>> printString(" ip: ") ; 
	mov	ax, L_yak_13
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	65
	; >>>>> printInt(itr->ip); 
	mov	si, word [bp-2]
	push	word [si]
	call	printInt
	add	sp, 2
	; >>>>> Line:	66
	; >>>>> printString(" dc: ") ; 
	mov	ax, L_yak_14
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	67
	; >>>>> printInt(itr->delayCount); 
	mov	si, word [bp-2]
	add	si, 30
	push	word [si]
	call	printInt
	add	sp, 2
	; >>>>> Line:	68
	; >>>>> printString(" pri: ") ; 
	mov	ax, L_yak_15
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	69
	; >>>>> printInt(itr->taskPriority); 
	mov	si, word [bp-2]
	add	si, 24
	push	word [si]
	call	printInt
	add	sp, 2
	; >>>>> Line:	70
	; >>>>> printString(", ") ; 
	mov	ax, L_yak_3
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	71
	; >>>>> itr = itr->nextTCB; 
	mov	si, word [bp-2]
	add	si, 32
	mov	ax, word [si]
	mov	word [bp-2], ax
L_yak_19:
	jmp	L_yak_18
L_yak_20:
	; >>>>> Line:	73
	; >>>>> printString("\r\n") ; 
	mov	ax, L_yak_4
	push	ax
	call	printString
	add	sp, 2
	mov	sp, bp
	pop	bp
	ret
L_yak_16:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yak_17
	ALIGN	2
firstDispatch:
	; >>>>> Line:	79
	; >>>>> static void firstDispatch(int calledFromISR){ 
	jmp	L_yak_23
L_yak_24:
	; >>>>> Line:	83
	; >>>>> YKCtxSwCount++; 
	inc	word [YKCtxSwCount]
	; >>>>> Line:	84
	; >>>>> nextTCB = readyListHead; 
	mov	ax, word [readyListHead]
	mov	word [nextTCB], ax
	; >>>>> Line:	85
	; >>>>> runningTCB = readyListHead; 
	mov	ax, word [readyListHead]
	mov	word [runningTCB], ax
	; >>>>> Line:	86
	; >>>>> dispatchHelperFirst(); 
	call	dispatchHelperFirst
	; >>>>> Line:	87
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_yak_25:
	; >>>>> Line:	88
	; >>>>> return; 
	mov	sp, bp
	pop	bp
	ret
L_yak_23:
	push	bp
	mov	bp, sp
	jmp	L_yak_24
	ALIGN	2
YKInitialize:
	; >>>>> Line:	92
	; >>>>> void YKInitialize(){ 
	jmp	L_yak_27
L_yak_28:
	; >>>>> Line:	94
	; >>>>> )&IdleStk[2048] , 100); 
	mov	word [bp-2], 0
	; >>>>> Line:	94
	; >>>>> )&IdleStk[2048] , 100); 
	call	YKEnterMutex
	; >>>>> Line:	95
	; >>>>> for(i= 0; i < 15 ; i++){ 
	mov	word [bp-2], 0
	jmp	L_yak_30
L_yak_29:
	; >>>>> Line:	96
	; >>>>> TCBArray[i].inUse = 0; 
	mov	ax, word [bp-2]
	mov	cx, 44
	imul	cx
	add	ax, TCBArray
	mov	si, ax
	add	si, 36
	mov	word [si], 0
	; >>>>> Line:	97
	; >>>>> TCBArray[i].id = i; 
	mov	ax, word [bp-2]
	mov	cx, 44
	imul	cx
	add	ax, TCBArray
	mov	si, ax
	add	si, 28
	mov	ax, word [bp-2]
	mov	word [si], ax
L_yak_32:
	inc	word [bp-2]
L_yak_30:
	cmp	word [bp-2], 15
	jl	L_yak_29
L_yak_31:
	; >>>>> Line:	99
	; >>>>> for(i = 0; i < 15; i++){ 
	mov	word [bp-2], 0
	jmp	L_yak_34
L_yak_33:
	; >>>>> Line:	100
	; >>>>> YKQArray[i].inUse = 0; 
	mov	ax, word [bp-2]
	mov	cx, 4
	shl	ax, cl
	add	ax, YKQArray
	mov	si, ax
	add	si, 4
	mov	word [si], 0
	; >>>>> Line:	101
	; >>>>> YKQArray[i].id = i; 
	mov	ax, word [bp-2]
	mov	cx, 4
	shl	ax, cl
	add	ax, YKQArray
	mov	si, ax
	add	si, 6
	mov	ax, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	102
	; >>>>> YKQArray[i].start = ((void *) 0); 
	mov	ax, word [bp-2]
	mov	cx, 4
	shl	ax, cl
	mov	si, ax
	add	si, YKQArray
	mov	word [si], 0
	; >>>>> Line:	103
	; >>>>> YKQArray[i].semaphore = YKSemCreate(0); 
	xor	ax, ax
	push	ax
	call	YKSemCreate
	add	sp, 2
	mov	dx, word [bp-2]
	mov	cx, 4
	shl	dx, cl
	add	dx, YKQArray
	mov	si, dx
	add	si, 8
	mov	word [si], ax
	; >>>>> Line:	104
	; >>>>> YKQArray[i].front = 0; 
	mov	ax, word [bp-2]
	mov	cx, 4
	shl	ax, cl
	add	ax, YKQArray
	mov	si, ax
	add	si, 10
	mov	word [si], 0
	; >>>>> Line:	105
	; >>>>> YKQArray[i].rear = 0; 
	mov	ax, word [bp-2]
	mov	cx, 4
	shl	ax, cl
	add	ax, YKQArray
	mov	si, ax
	add	si, 12
	mov	word [si], 0
	; >>>>> Line:	106
	; >>>>> YKQArray[i].numberPendingOn = 0; 
	mov	ax, word [bp-2]
	mov	cx, 4
	shl	ax, cl
	add	ax, YKQArray
	mov	si, ax
	add	si, 14
	mov	word [si], 0
L_yak_36:
	inc	word [bp-2]
L_yak_34:
	cmp	word [bp-2], 15
	jl	L_yak_33
L_yak_35:
	; >>>>> Line:	108
	; >>>>> for(i= 0; i < 15 ; i++){ 
	mov	word [bp-2], 0
	jmp	L_yak_38
L_yak_37:
	; >>>>> Line:	109
	; >>>>> YKEVENTArray[i].inUse = 0; 
	mov	ax, word [bp-2]
	mov	cx, 3
	shl	ax, cl
	add	ax, YKEVENTArray
	mov	si, ax
	add	si, 4
	mov	word [si], 0
	; >>>>> Line:	110
	; >>>>> YKEVENTArray[i].id = i; 
	mov	ax, word [bp-2]
	mov	cx, 3
	shl	ax, cl
	add	ax, YKEVENTArray
	mov	si, ax
	add	si, 2
	mov	ax, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	111
	; >>>>> YKEVENTArray[i].eventPendingListHead = ((void *) 0); 
	mov	ax, word [bp-2]
	mov	cx, 3
	shl	ax, cl
	add	ax, YKEVENTArray
	mov	si, ax
	add	si, 6
	mov	word [si], 0
L_yak_40:
	inc	word [bp-2]
L_yak_38:
	cmp	word [bp-2], 15
	jl	L_yak_37
L_yak_39:
	; >>>>> Line:	113
	; >>>>> YKNewTask(YKIdleTask, (void *)&IdleStk[2048] , 100); 
	mov	ax, 100
	push	ax
	mov	ax, (IdleStk+4096)
	push	ax
	mov	ax, YKIdleTask
	push	ax
	call	YKNewTask
	add	sp, 6
	; >>>>> Line:	114
	; >>>>>  
	call	YKExitMutex
	mov	sp, bp
	pop	bp
	ret
L_yak_27:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yak_28
	ALIGN	2
YKNewTask:
	; >>>>> Line:	117
	; >>>>> void YKNewTask(void(*task)(void), void * taskStack, unsigned char priority){ 
	jmp	L_yak_42
L_yak_43:
	; >>>>> Line:	124
	; >>>>> YKEnterMutex(); 
	mov	word [bp-2], 0
	mov	ax, word [readyListHead]
	mov	word [bp-4], ax
	; >>>>> Line:	124
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	125
	; >>>>> for(i = 0; i < 15; i++){ 
	mov	word [bp-2], 0
	jmp	L_yak_45
L_yak_44:
	; >>>>> Line:	126
	; >>>>> if(!TCBArray[i].inUse){ 
	mov	ax, word [bp-2]
	mov	cx, 44
	imul	cx
	add	ax, TCBArray
	mov	si, ax
	add	si, 36
	mov	ax, word [si]
	test	ax, ax
	jne	L_yak_48
	; >>>>> Line:	127
	; >>>>> break; 
	jmp	L_yak_46
L_yak_48:
L_yak_47:
	inc	word [bp-2]
L_yak_45:
	cmp	word [bp-2], 15
	jl	L_yak_44
L_yak_46:
	; >>>>> Line:	136
	; >>>>> TCBArray[i].taskPriority = priority; 
	mov	al, byte [bp+8]
	xor	ah, ah
	push	ax
	mov	ax, word [bp-2]
	mov	cx, 44
	imul	cx
	mov	dx, ax
	add	dx, TCBArray
	mov	si, dx
	add	si, 24
	pop	ax
	mov	word [si], ax
	; >>>>> Line:	137
	; >>>>> TCBArray[i].taskStack = taskStack; 
	mov	ax, word [bp-2]
	mov	cx, 44
	imul	cx
	add	ax, TCBArray
	mov	si, ax
	add	si, 22
	mov	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	138
	; >>>>> TCBArray[i].ip = (unsigned int)task; 
	mov	ax, word [bp-2]
	mov	cx, 44
	imul	cx
	mov	si, ax
	add	si, TCBArray
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	139
	; >>>>> TCBArray[i].taskState = running; 
	mov	ax, word [bp-2]
	mov	cx, 44
	imul	cx
	add	ax, TCBArray
	mov	si, ax
	add	si, 26
	mov	word [si], 0
	; >>>>> Line:	140
	; >>>>> TCBArray[i].delayCount = 0; 
	mov	ax, word [bp-2]
	mov	cx, 44
	imul	cx
	add	ax, TCBArray
	mov	si, ax
	add	si, 30
	mov	word [si], 0
	; >>>>> Line:	141
	; >>>>> TCBArray[i].inUse = 1; 
	mov	ax, word [bp-2]
	mov	cx, 44
	imul	cx
	add	ax, TCBArray
	mov	si, ax
	add	si, 36
	mov	word [si], 1
	; >>>>> Line:	142
	; >>>>> TCBArray[i].sp = (unsigned)(taskStack); 
	mov	ax, word [bp-2]
	mov	cx, 44
	imul	cx
	add	ax, TCBArray
	mov	si, ax
	add	si, 2
	mov	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	143
	; >>>>> TCBArray[i].bp = (unsigned)(ta 
	mov	ax, word [bp-2]
	mov	cx, 44
	imul	cx
	add	ax, TCBArray
	mov	si, ax
	add	si, 4
	mov	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	145
	; >>>>> temp = runningTCB; 
	mov	ax, word [runningTCB]
	mov	word [bp-6], ax
	; >>>>> Line:	146
	; >>>>> runningTCB = &(TCBArray[i]); 
	mov	ax, word [bp-2]
	mov	cx, 44
	imul	cx
	add	ax, TCBArray
	mov	word [runningTCB], ax
	; >>>>> Line:	147
	; >>>>> initializeStack(); 
	call	initializeStack
	; >>>>> Line:	148
	; >>>>> runningTCB = temp; 
	mov	ax, word [bp-6]
	mov	word [runningTCB], ax
	; >>>>> Line:	151
	; >>>>> if(readyListHead == ((void *) 0)){ 
	mov	ax, word [readyListHead]
	test	ax, ax
	jne	L_yak_49
	; >>>>> Line:	152
	; >>>>> readyListHead = &TCBArray[i]; 
	mov	ax, word [bp-2]
	mov	cx, 44
	imul	cx
	add	ax, TCBArray
	mov	word [readyListHead], ax
	; >>>>> Line:	153
	; >>>>> readyListHead->prevTCB = ((void *) 0); 
	mov	si, word [readyListHead]
	add	si, 34
	mov	word [si], 0
	; >>>>> Line:	154
	; >>>>> readyListHead->nextTCB = ((void *) 0); 
	mov	si, word [readyListHead]
	add	si, 32
	mov	word [si], 0
	; >>>>> Line:	155
	; >>>>> if(isRunning){ 
	mov	ax, word [isRunning]
	test	ax, ax
	je	L_yak_50
	; >>>>> Line:	156
	; >>>>> YKScheduler(0); 
	xor	ax, ax
	push	ax
	call	YKScheduler
	add	sp, 2
L_yak_50:
	; >>>>> Line:	159
	; >>>>> return; 
	jmp	L_yak_51
L_yak_49:
	; >>>>> Line:	162
	; >>>>> while(1){ 
	jmp	L_yak_53
L_yak_52:
	; >>>>> Line:	163
	; >>>>> if(itr->taskPriority >= TCBArray[i].taskPriority){ 
	mov	ax, word [bp-2]
	mov	cx, 44
	imul	cx
	add	ax, TCBArray
	mov	si, ax
	add	si, 24
	mov	di, word [bp-4]
	add	di, 24
	mov	ax, word [di]
	cmp	ax, word [si]
	jb	L_yak_55
	; >>>>> Line:	164
	; >>>>> if(itr == readyListHead){ 
	mov	ax, word [readyListHead]
	cmp	ax, word [bp-4]
	jne	L_yak_56
	; >>>>> Line:	166
	; >>>>> itr->prevTCB = &TCBArray[i]; 
	mov	ax, word [bp-2]
	mov	cx, 44
	imul	cx
	add	ax, TCBArray
	mov	si, word [bp-4]
	add	si, 34
	mov	word [si], ax
	; >>>>> Line:	167
	; >>>>> TCBArray[i].nextTCB = itr; 
	mov	ax, word [bp-2]
	mov	cx, 44
	imul	cx
	add	ax, TCBArray
	mov	si, ax
	add	si, 32
	mov	ax, word [bp-4]
	mov	word [si], ax
	; >>>>> Line:	168
	; >>>>> TCBArray[i].prevTCB = ((void 
	mov	ax, word [bp-2]
	mov	cx, 44
	imul	cx
	add	ax, TCBArray
	mov	si, ax
	add	si, 34
	mov	word [si], 0
	; >>>>> Line:	169
	; >>>>> readyListHead = &TCBArray[i]; 
	mov	ax, word [bp-2]
	mov	cx, 44
	imul	cx
	add	ax, TCBArray
	mov	word [readyListHead], ax
	; >>>>> Line:	170
	; >>>>> break; 
	jmp	L_yak_54
	jmp	L_yak_57
L_yak_56:
	; >>>>> Line:	173
	; >>>>> temp = itr->prevTCB; 
	mov	si, word [bp-4]
	add	si, 34
	mov	ax, word [si]
	mov	word [bp-6], ax
	; >>>>> Line:	174
	; >>>>> itr->prevTCB = &TCBArray[i]; 
	mov	ax, word [bp-2]
	mov	cx, 44
	imul	cx
	add	ax, TCBArray
	mov	si, word [bp-4]
	add	si, 34
	mov	word [si], ax
	; >>>>> Line:	175
	; >>>>> TCBArray[i].nextTCB = itr; 
	mov	ax, word [bp-2]
	mov	cx, 44
	imul	cx
	add	ax, TCBArray
	mov	si, ax
	add	si, 32
	mov	ax, word [bp-4]
	mov	word [si], ax
	; >>>>> Line:	176
	; >>>>> TCBArray[i].prevTCB = temp; 
	mov	ax, word [bp-2]
	mov	cx, 44
	imul	cx
	add	ax, TCBArray
	mov	si, ax
	add	si, 34
	mov	ax, word [bp-6]
	mov	word [si], ax
	; >>>>> Line:	177
	; >>>>> temp->nextTCB = &TCBArray[i]; 
	mov	ax, word [bp-2]
	mov	cx, 44
	imul	cx
	add	ax, TCBArray
	mov	si, word [bp-6]
	add	si, 32
	mov	word [si], ax
	; >>>>> Line:	178
	; >>>>> break; 
	jmp	L_yak_54
L_yak_57:
L_yak_55:
	; >>>>> Line:	182
	; >>>>> if(itr->nextTCB == ((void *) 0)){ 
	mov	si, word [bp-4]
	add	si, 32
	mov	ax, word [si]
	test	ax, ax
	jne	L_yak_58
	; >>>>> Line:	183
	; >>>>> itr->nextTCB = &TCBArray[i]; 
	mov	ax, word [bp-2]
	mov	cx, 44
	imul	cx
	add	ax, TCBArray
	mov	si, word [bp-4]
	add	si, 32
	mov	word [si], ax
	; >>>>> Line:	184
	; >>>>> TCBArray[i].prevTCB = itr; 
	mov	ax, word [bp-2]
	mov	cx, 44
	imul	cx
	add	ax, TCBArray
	mov	si, ax
	add	si, 34
	mov	ax, word [bp-4]
	mov	word [si], ax
	; >>>>> Line:	185
	; >>>>> TCBArray[i].nextTCB = ((void *) 0); 
	mov	ax, word [bp-2]
	mov	cx, 44
	imul	cx
	add	ax, TCBArray
	mov	si, ax
	add	si, 32
	mov	word [si], 0
	; >>>>> Line:	186
	; >>>>> break; 
	jmp	L_yak_54
L_yak_58:
	; >>>>> Line:	189
	; >>>>> itr = itr->nextTCB; 
	mov	si, word [bp-4]
	add	si, 32
	mov	ax, word [si]
	mov	word [bp-4], ax
L_yak_53:
	jmp	L_yak_52
L_yak_54:
	; >>>>> Line:	191
	; >>>>> if(isRunning){ 
	mov	ax, word [isRunning]
	test	ax, ax
	je	L_yak_59
	; >>>>> Line:	192
	; >>>>> YKScheduler(0); 
	xor	ax, ax
	push	ax
	call	YKScheduler
	add	sp, 2
L_yak_59:
	; >>>>> Line:	194
	; >>>>> if(isRunning){ 
	mov	ax, word [isRunning]
	test	ax, ax
	je	L_yak_60
	; >>>>> Line:	195
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_yak_60:
L_yak_51:
	mov	sp, bp
	pop	bp
	ret
L_yak_42:
	push	bp
	mov	bp, sp
	sub	sp, 6
	jmp	L_yak_43
	ALIGN	2
YKRun:
	; >>>>> Line:	199
	; >>>>> void YKRun(){ 
	jmp	L_yak_62
L_yak_63:
	; >>>>> Line:	200
	; >>>>> tex() 
	mov	word [isRunning], 1
	; >>>>> Line:	201
	; >>>>> firstDispatch(0); 
	xor	ax, ax
	push	ax
	call	firstDispatch
	add	sp, 2
	mov	sp, bp
	pop	bp
	ret
L_yak_62:
	push	bp
	mov	bp, sp
	jmp	L_yak_63
	ALIGN	2
YKIdleTask:
	; >>>>> Line:	205
	; >>>>> void YKIdleTask(){ 
	jmp	L_yak_65
L_yak_66:
	; >>>>> Line:	207
	; >>>>> while(1){ 
	jmp	L_yak_68
L_yak_67:
	; >>>>> Line:	209
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	210
	; >>>>> YKIdleCount++; 
	inc	word [YKIdleCount]
	; >>>>> Line:	211
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_yak_68:
	jmp	L_yak_67
L_yak_69:
	mov	sp, bp
	pop	bp
	ret
L_yak_65:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yak_66
	ALIGN	2
YKScheduler:
	; >>>>> Line:	216
	; >>>>> void YKScheduler(int calledFromISR){ 
	jmp	L_yak_71
L_yak_72:
	; >>>>> Line:	217
	; >>>>> nextTCB = readyListHead; 
	mov	ax, word [readyListHead]
	mov	word [nextTCB], ax
	; >>>>> Line:	231
	; >>>>> if(nextTCB == runningTCB){ 
	mov	ax, word [runningTCB]
	cmp	ax, word [nextTCB]
	jne	L_yak_73
	; >>>>> Line:	232
	; >>>>> if(!calledFromISR){ 
	mov	ax, word [bp+4]
	test	ax, ax
	jne	L_yak_74
	; >>>>> Line:	233
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_yak_74:
	; >>>>> Line:	235
	; >>>>> return; 
	jmp	L_yak_75
L_yak_73:
	; >>>>> Line:	237
	; >>>>> YKCtxSwCount++; 
	inc	word [YKCtxSwCount]
	; >>>>> Line:	238
	; >>>>> dispatcher(); 
	call	dispatcher
	; >>>>> Line:	246
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_yak_75:
	; >>>>> Line:	247
	; >>>>> return; 
	mov	sp, bp
	pop	bp
	ret
L_yak_71:
	push	bp
	mov	bp, sp
	jmp	L_yak_72
	ALIGN	2
YKDelayTask:
	; >>>>> Line:	251
	; >>>>> void YKDelayTask(unsigned count){ 
	jmp	L_yak_77
L_yak_78:
	; >>>>> Line:	254
	; >>>>> if(count == 0){ 
	mov	ax, word [delayListHead]
	mov	word [bp-2], ax
	; >>>>> Line:	254
	; >>>>> if(count == 0){ 
	mov	ax, word [bp+4]
	test	ax, ax
	jne	L_yak_79
	; >>>>> Line:	255
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	256
	; >>>>> return; 
	jmp	L_yak_80
L_yak_79:
	; >>>>> Line:	268
	; >>>>> YKEnterMutex() 
	call	YKEnterMutex
	; >>>>> Line:	269
	; >>>>> runningTCB->delayCount = count; 
	mov	si, word [runningTCB]
	add	si, 30
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	275
	; >>>>> if(runningTCB == readyListHead){ 
	mov	ax, word [readyListHead]
	cmp	ax, word [runningTCB]
	jne	L_yak_81
	; >>>>> Line:	276
	; >>>>> readyListHead = runningTCB->nextTCB; 
	mov	si, word [runningTCB]
	add	si, 32
	mov	ax, word [si]
	mov	word [readyListHead], ax
	; >>>>> Line:	277
	; >>>>> readyListHead->prevTCB = ((void *) 0); 
	mov	si, word [readyListHead]
	add	si, 34
	mov	word [si], 0
	jmp	L_yak_82
L_yak_81:
	; >>>>> Line:	278
	; >>>>> }else if(runningTCB->nextTCB == ((void *) 0)){ 
	mov	si, word [runningTCB]
	add	si, 32
	mov	ax, word [si]
	test	ax, ax
	jne	L_yak_83
	; >>>>> Line:	279
	; >>>>> runningTCB->prevTCB->nextTCB = ((void *) 0); 
	mov	si, word [runningTCB]
	add	si, 34
	mov	si, word [si]
	add	si, 32
	mov	word [si], 0
	jmp	L_yak_84
L_yak_83:
	; >>>>> Line:	281
	; >>>>> runningTCB->prevTCB->nextTCB = runningTCB->nextTCB; 
	mov	si, word [runningTCB]
	add	si, 32
	mov	di, word [runningTCB]
	add	di, 34
	mov	di, word [di]
	add	di, 32
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	282
	; >>>>> runningTCB->nextTCB->prevTCB = runningTCB->prevTCB; 
	mov	si, word [runningTCB]
	add	si, 34
	mov	di, word [runningTCB]
	add	di, 32
	mov	di, word [di]
	add	di, 34
	mov	ax, word [si]
	mov	word [di], ax
L_yak_84:
L_yak_82:
	; >>>>> Line:	288
	; >>>>> if(delayListHead == ((void *) 0)){ 
	mov	ax, word [delayListHead]
	test	ax, ax
	jne	L_yak_85
	; >>>>> Line:	289
	; >>>>> delayListHead = runningTCB; 
	mov	ax, word [runningTCB]
	mov	word [delayListHead], ax
	; >>>>> Line:	290
	; >>>>> delayListHead->prevTCB = ((void *) 0); 
	mov	si, word [delayListHead]
	add	si, 34
	mov	word [si], 0
	; >>>>> Line:	291
	; >>>>> delayListHead->nextTCB = ((void 
	mov	si, word [delayListHead]
	add	si, 32
	mov	word [si], 0
	; >>>>> Line:	292
	; >>>>> YKScheduler(0); 
	xor	ax, ax
	push	ax
	call	YKScheduler
	add	sp, 2
	; >>>>> Line:	293
	; >>>>> return; 
	jmp	L_yak_80
L_yak_85:
	; >>>>> Line:	298
	; >>>>> while(1){ 
	jmp	L_yak_87
L_yak_86:
	; >>>>> Line:	299
	; >>>>> if(itr == ((void *) 0)){ 
	mov	ax, word [bp-2]
	test	ax, ax
	jne	L_yak_89
	; >>>>> Line:	300
	; >>>>> deltaDelay = 0; 
	mov	word [deltaDelay], 0
	; >>>>> Line:	301
	; >>>>> break; 
	jmp	L_yak_88
L_yak_89:
	; >>>>> Line:	303
	; >>>>> if(itr == delayListHead){ 
	mov	ax, word [delayListHead]
	cmp	ax, word [bp-2]
	jne	L_yak_90
	; >>>>> Line:	304
	; >>>>> itr = itr->nextTCB; 
	mov	si, word [bp-2]
	add	si, 32
	mov	ax, word [si]
	mov	word [bp-2], ax
	; >>>>> Line:	305
	; >>>>> continue; 
	jmp	L_yak_87
L_yak_90:
	; >>>>> Line:	307
	; >>>>> itr->delayCount -= deltaDelay; 
	mov	si, word [bp-2]
	add	si, 30
	mov	ax, word [deltaDelay]
	sub	word [si], ax
	; >>>>> Line:	308
	; >>>>> itr = itr->nextTCB; 
	mov	si, word [bp-2]
	add	si, 32
	mov	ax, word [si]
	mov	word [bp-2], ax
L_yak_87:
	jmp	L_yak_86
L_yak_88:
	; >>>>> Line:	312
	; >>>>> itr = delayListHead; 
	mov	ax, word [delayListHead]
	mov	word [bp-2], ax
	; >>>>> Line:	313
	; >>>>> while(1){ 
	jmp	L_yak_92
L_yak_91:
	; >>>>> Line:	314
	; >>>>> if(itr->delayCount >= runningTCB->delayCount){ 
	mov	si, word [bp-2]
	add	si, 30
	mov	di, word [runningTCB]
	add	di, 30
	mov	ax, word [di]
	cmp	ax, word [si]
	ja	L_yak_94
	; >>>>> Line:	316
	; >>>>> if(itr == delayListHead){ 
	mov	ax, word [delayListHead]
	cmp	ax, word [bp-2]
	jne	L_yak_95
	; >>>>> Line:	317
	; >>>>> itr->prevTCB = runningTCB; 
	mov	si, word [bp-2]
	add	si, 34
	mov	ax, word [runningTCB]
	mov	word [si], ax
	; >>>>> Line:	318
	; >>>>> runningTCB->nextTCB = itr; 
	mov	si, word [runningTCB]
	add	si, 32
	mov	ax, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	319
	; >>>>> runningTCB->prevTCB = ((void *) 0); 
	mov	si, word [runningTCB]
	add	si, 34
	mov	word [si], 0
	; >>>>> Line:	320
	; >>>>> delayListHead = runningTCB; 
	mov	ax, word [runningTCB]
	mov	word [delayListHead], ax
	; >>>>> Line:	321
	; >>>>> break; 
	jmp	L_yak_93
	jmp	L_yak_96
L_yak_95:
	; >>>>> Line:	324
	; >>>>>  
	mov	si, word [bp-2]
	add	si, 34
	mov	ax, word [si]
	mov	word [bp-4], ax
	; >>>>> Line:	325
	; >>>>> itr->prevTCB = runningTCB; 
	mov	si, word [bp-2]
	add	si, 34
	mov	ax, word [runningTCB]
	mov	word [si], ax
	; >>>>> Line:	326
	; >>>>> runningTCB->nextTCB = itr; 
	mov	si, word [runningTCB]
	add	si, 32
	mov	ax, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	327
	; >>>>> runningTCB->prevTCB = temp; 
	mov	si, word [runningTCB]
	add	si, 34
	mov	ax, word [bp-4]
	mov	word [si], ax
	; >>>>> Line:	328
	; >>>>> temp->nextTCB = runningTCB; 
	mov	si, word [bp-4]
	add	si, 32
	mov	ax, word [runningTCB]
	mov	word [si], ax
	; >>>>> Line:	329
	; >>>>> break; 
	jmp	L_yak_93
L_yak_96:
L_yak_94:
	; >>>>> Line:	333
	; >>>>> if(itr->nextTCB == ((void *) 0)){ 
	mov	si, word [bp-2]
	add	si, 32
	mov	ax, word [si]
	test	ax, ax
	jne	L_yak_97
	; >>>>> Line:	334
	; >>>>> itr->nextTCB = runningTCB; 
	mov	si, word [bp-2]
	add	si, 32
	mov	ax, word [runningTCB]
	mov	word [si], ax
	; >>>>> Line:	335
	; >>>>> runningTCB->prevTCB = itr; 
	mov	si, word [runningTCB]
	add	si, 34
	mov	ax, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	336
	; >>>>> runningTCB->nextTCB = ((void *) 0); 
	mov	si, word [runningTCB]
	add	si, 32
	mov	word [si], 0
	; >>>>> Line:	337
	; >>>>> break; 
	jmp	L_yak_93
L_yak_97:
	; >>>>> Line:	340
	; >>>>> itr = itr->nextTCB; 
	mov	si, word [bp-2]
	add	si, 32
	mov	ax, word [si]
	mov	word [bp-2], ax
L_yak_92:
	jmp	L_yak_91
L_yak_93:
	; >>>>> Line:	342
	; >>>>> YKScheduler(0); 
	xor	ax, ax
	push	ax
	call	YKScheduler
	add	sp, 2
L_yak_80:
	mov	sp, bp
	pop	bp
	ret
L_yak_77:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_yak_78
	ALIGN	2
YKEnterISR:
	; >>>>> Line:	345
	; >>>>> void YKEnterISR(){ 
	jmp	L_yak_99
L_yak_100:
	; >>>>> Line:	346
	; >>>>> ISRDepth++; 
	inc	word [ISRDepth]
	mov	sp, bp
	pop	bp
	ret
L_yak_99:
	push	bp
	mov	bp, sp
	jmp	L_yak_100
	ALIGN	2
YKExitISR:
	; >>>>> Line:	349
	; >>>>> void YKExitISR(){ 
	jmp	L_yak_102
L_yak_103:
	; >>>>> Line:	350
	; >>>>> ISRDepth--; 
	dec	word [ISRDepth]
	; >>>>> Line:	351
	; >>>>> if(ISRDepth == 0){ 
	mov	ax, word [ISRDepth]
	test	ax, ax
	jne	L_yak_104
	; >>>>> Line:	352
	; >>>>> YKScheduler(1); 
	mov	ax, 1
	push	ax
	call	YKScheduler
	add	sp, 2
L_yak_104:
	mov	sp, bp
	pop	bp
	ret
L_yak_102:
	push	bp
	mov	bp, sp
	jmp	L_yak_103
	ALIGN	2
YKTickHandler:
	; >>>>> Line:	358
	; >>>>> void YKTickHandler(){ 
	jmp	L_yak_106
L_yak_107:
	; >>>>> Line:	371
	; >>>>> YKEnterMutex(); 
	mov	ax, word [delayListHead]
	mov	word [bp-2], ax
	mov	word [bp-8], 1
	mov	word [bp-10], 0
	; >>>>> Line:	371
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	372
	; >>>>> YKTickNum++; 
	inc	word [YKTickNum]
	; >>>>> Line:	382
	; >>>>> delayListHead->delayCount--; 
	mov	si, word [delayListHead]
	add	si, 30
	dec	word [si]
	; >>>>> Line:	383
	; >>>>> deltaDelay++; 
	inc	word [deltaDelay]
	; >>>>> Line:	384
	; >>>>> if(delayListHead->delayCount != 0){ 
	mov	si, word [delayListHead]
	add	si, 30
	mov	ax, word [si]
	test	ax, ax
	je	L_yak_108
	; >>>>> Line:	385
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	386
	; >>>>> return; 
	jmp	L_yak_109
L_yak_108:
	; >>>>> Line:	391
	; >>>>> while(1){ 
	jmp	L_yak_111
L_yak_110:
	; >>>>> Line:	392
	; >>>>> itr = delayListHead; 
	mov	ax, word [delayListHead]
	mov	word [bp-2], ax
	; >>>>> Line:	393
	; >>>>> moveOutOfDelayList = delayListHead; 
	mov	ax, word [delayListHead]
	mov	word [bp-4], ax
	; >>>>> Line:	395
	; >>>>> if(delayListHead->nextTCB != ((void *) 0)){ 
	mov	si, word [delayListHead]
	add	si, 32
	mov	ax, word [si]
	test	ax, ax
	je	L_yak_113
	; >>>>> Line:	396
	; >>>>> delayListHead = delayListHead->nextTCB; 
	mov	si, word [delayListHead]
	add	si, 32
	mov	ax, word [si]
	mov	word [delayListHead], ax
	; >>>>> Line:	397
	; >>>>> delayListHead->prevTCB = ((void *) 0); 
	mov	si, word [delayListHead]
	add	si, 34
	mov	word [si], 0
	; >>>>> Line:	398
	; >>>>> itr = delayListHead; 
	mov	ax, word [delayListHead]
	mov	word [bp-2], ax
	; >>>>> Line:	399
	; >>>>> while(1){ 
	jmp	L_yak_115
L_yak_114:
	; >>>>> Line:	400
	; >>>>> itr->delayCount  
	mov	si, word [bp-2]
	add	si, 30
	mov	ax, word [deltaDelay]
	sub	word [si], ax
	; >>>>> Line:	401
	; >>>>> if(itr->nextTCB == ((void *) 0)){ 
	mov	si, word [bp-2]
	add	si, 32
	mov	ax, word [si]
	test	ax, ax
	jne	L_yak_117
	; >>>>> Line:	402
	; >>>>> deltaDelay = 0; 
	mov	word [deltaDelay], 0
	; >>>>> Line:	403
	; >>>>> break; 
	jmp	L_yak_116
L_yak_117:
	; >>>>> Line:	405
	; >>>>> itr = itr->nextTCB; 
	mov	si, word [bp-2]
	add	si, 32
	mov	ax, word [si]
	mov	word [bp-2], ax
L_yak_115:
	jmp	L_yak_114
L_yak_116:
	jmp	L_yak_118
L_yak_113:
	; >>>>> Line:	408
	; >>>>> delayListHead = ((void *) 0); 
	mov	word [delayListHead], 0
	; >>>>> Line:	409
	; >>>>> deltaDelay = 0; 
	mov	word [deltaDelay], 0
	; >>>>> Line:	410
	; >>>>> keepGoing = 0; 
	mov	word [bp-8], 0
L_yak_118:
	; >>>>> Line:	416
	; >>>>> if(readyListHead == ((void *) 0)){ 
	mov	ax, word [readyListHead]
	test	ax, ax
	jne	L_yak_119
	; >>>>> Line:	417
	; >>>>> readyListHead = moveOutOfDelayList; 
	mov	ax, word [bp-4]
	mov	word [readyListHead], ax
	; >>>>> Line:	418
	; >>>>> readyListHead->prevTCB = ((void *) 0); 
	mov	si, word [readyListHead]
	add	si, 34
	mov	word [si], 0
	; >>>>> Line:	419
	; >>>>> readyListHead->nextTCB = ((void *) 0); 
	mov	si, word [readyListHead]
	add	si, 32
	mov	word [si], 0
	; >>>>> Line:	422
	; >>>>> return; 
	jmp	L_yak_109
L_yak_119:
	; >>>>> Line:	425
	; >>>>> itr = readyListHead; 
	mov	ax, word [readyListHead]
	mov	word [bp-2], ax
	; >>>>> Line:	426
	; >>>>> while(1){ 
	jmp	L_yak_121
L_yak_120:
	; >>>>> Line:	427
	; >>>>> if(itr->taskPriority >= moveOutOfDelayList->taskPriority){ 
	mov	si, word [bp-2]
	add	si, 24
	mov	di, word [bp-4]
	add	di, 24
	mov	ax, word [di]
	cmp	ax, word [si]
	ja	L_yak_123
	; >>>>> Line:	428
	; >>>>> if(itr ==  
	mov	ax, word [readyListHead]
	cmp	ax, word [bp-2]
	jne	L_yak_124
	; >>>>> Line:	430
	; >>>>> itr->prevTCB = moveOutOfDelayList; 
	mov	si, word [bp-2]
	add	si, 34
	mov	ax, word [bp-4]
	mov	word [si], ax
	; >>>>> Line:	431
	; >>>>> moveOutOfDelayList->nextTCB = itr; 
	mov	si, word [bp-4]
	add	si, 32
	mov	ax, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	432
	; >>>>> moveOutOfDelayList->prevTCB = ((void *) 0); 
	mov	si, word [bp-4]
	add	si, 34
	mov	word [si], 0
	; >>>>> Line:	433
	; >>>>> readyListHead = moveOutOfDelayList; 
	mov	ax, word [bp-4]
	mov	word [readyListHead], ax
	; >>>>> Line:	434
	; >>>>> break; 
	jmp	L_yak_122
	jmp	L_yak_125
L_yak_124:
	; >>>>> Line:	437
	; >>>>> temp = itr->prevTCB; 
	mov	si, word [bp-2]
	add	si, 34
	mov	ax, word [si]
	mov	word [bp-6], ax
	; >>>>> Line:	438
	; >>>>> itr->prevTCB = moveOutOfDelayList; 
	mov	si, word [bp-2]
	add	si, 34
	mov	ax, word [bp-4]
	mov	word [si], ax
	; >>>>> Line:	439
	; >>>>> moveOutOfDelayList->nextTCB = itr; 
	mov	si, word [bp-4]
	add	si, 32
	mov	ax, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	440
	; >>>>> moveOutOfDelayList->prevTCB = temp; 
	mov	si, word [bp-4]
	add	si, 34
	mov	ax, word [bp-6]
	mov	word [si], ax
	; >>>>> Line:	441
	; >>>>> temp->nextTCB = moveOutOfDelayList; 
	mov	si, word [bp-6]
	add	si, 32
	mov	ax, word [bp-4]
	mov	word [si], ax
	; >>>>> Line:	442
	; >>>>> break; 
	jmp	L_yak_122
L_yak_125:
L_yak_123:
	; >>>>> Line:	445
	; >>>>> if(itr->nextTCB == ((void *) 0)){ 
	mov	si, word [bp-2]
	add	si, 32
	mov	ax, word [si]
	test	ax, ax
	jne	L_yak_126
	; >>>>> Line:	446
	; >>>>> itr->nextTCB = moveOutOfDelayList; 
	mov	si, word [bp-2]
	add	si, 32
	mov	ax, word [bp-4]
	mov	word [si], ax
	; >>>>> Line:	447
	; >>>>> = pendingListHead; 
	mov	si, word [bp-4]
	add	si, 34
	mov	ax, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	448
	; >>>>> moveOutOfDelayList->nextTCB = ((void *) 0); 
	mov	si, word [bp-4]
	add	si, 32
	mov	word [si], 0
	; >>>>> Line:	449
	; >>>>> break; 
	jmp	L_yak_122
L_yak_126:
	; >>>>> Line:	452
	; >>>>> itr = itr->nextTCB; 
	mov	si, word [bp-2]
	add	si, 32
	mov	ax, word [si]
	mov	word [bp-2], ax
L_yak_121:
	jmp	L_yak_120
L_yak_122:
	; >>>>> Line:	454
	; >>>>> if(delayListHead->delayCount > 0 || !keepGoing){ 
	mov	si, word [delayListHead]
	add	si, 30
	mov	ax, word [si]
	test	ax, ax
	jne	L_yak_128
	mov	ax, word [bp-8]
	test	ax, ax
	jne	L_yak_127
L_yak_128:
	; >>>>> Line:	455
	; >>>>> break; 
	jmp	L_yak_112
L_yak_127:
L_yak_111:
	jmp	L_yak_110
L_yak_112:
L_yak_109:
	; >>>>> Line:	459
	; >>>>> YKExitMutex; 
	mov	sp, bp
	pop	bp
	ret
L_yak_106:
	push	bp
	mov	bp, sp
	sub	sp, 10
	jmp	L_yak_107
	ALIGN	2
YKSemCreate:
	; >>>>> Line:	462
	; >>>>> YKSEM* YKSemCreate(int initialValue){ 
	jmp	L_yak_130
L_yak_131:
	; >>>>> Line:	464
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	465
	; >>>>> YKSEMArray[YKSEMNextFree].value = initialValue; 
	mov	ax, word [YKSEMNextFree]
	shl	ax, 1
	mov	si, ax
	add	si, YKSEMArray
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	466
	; >>>>> YKSEMNextFree++; 
	inc	word [YKSEMNextFree]
	; >>>>> Line:	467
	; >>>>> returnValue = (YKSEM*)&(YKSEMArray[YKSEMNextFree - 1]); 
	mov	ax, word [YKSEMNextFree]
	dec	ax
	shl	ax, 1
	add	ax, YKSEMArray
	mov	word [bp-2], ax
	; >>>>> Line:	468
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	469
	; >>>>> return returnValue; 
	mov	ax, word [bp-2]
L_yak_132:
	mov	sp, bp
	pop	bp
	ret
L_yak_130:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yak_131
L_yak_134:
	DB	"IDLE task should not call YKSemPend!",0xD,0xA,")",0
	ALIGN	2
YKSemPend:
	; >>>>> Line:	474
	; >>>>> void YKSemPend(YKSEM *semaphore){ 
	jmp	L_yak_135
L_yak_136:
	; >>>>> Line:	476
	; >>>>> YKE 
	mov	ax, word [pendingListHead]
	mov	word [bp-2], ax
	; >>>>> Line:	476
	; >>>>> YKE 
	call	YKEnterMutex
	; >>>>> Line:	483
	; >>>>> if(semaphore->value > 0){ 
	mov	si, word [bp+4]
	cmp	word [si], 0
	jle	L_yak_137
	; >>>>> Line:	484
	; >>>>> semaphore->value--; 
	dec	word [si]
	; >>>>> Line:	485
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	486
	; >>>>> return; 
	jmp	L_yak_138
L_yak_137:
	; >>>>> Line:	489
	; >>>>> runningTCB->pendingOn = semaphore; 
	mov	si, word [runningTCB]
	add	si, 38
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	492
	; >>>>> if(runningTCB->nextTCB == ((void *) 0) && runningTCB->prevTCB == ((void *) 0)){ 
	mov	si, word [runningTCB]
	add	si, 32
	mov	ax, word [si]
	test	ax, ax
	jne	L_yak_139
	mov	si, word [runningTCB]
	add	si, 34
	mov	ax, word [si]
	test	ax, ax
	jne	L_yak_139
	; >>>>> Line:	493
	; >>>>> printString("IDLE task should not call YKSemPend!\r\n)"); 
	mov	ax, L_yak_134
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	494
	; >>>>> exit(0); 
	xor	al, al
	push	ax
	call	exit
	add	sp, 2
	jmp	L_yak_140
L_yak_139:
	; >>>>> Line:	495
	; >>>>> }else if(runningTCB == readyListHead){ 
	mov	ax, word [readyListHead]
	cmp	ax, word [runningTCB]
	jne	L_yak_141
	; >>>>> Line:	496
	; >>>>> readyListHead = runningTCB->nextTCB; 
	mov	si, word [runningTCB]
	add	si, 32
	mov	ax, word [si]
	mov	word [readyListHead], ax
	; >>>>> Line:	497
	; >>>>> readyListHead->prevTCB = ((void *) 0); 
	mov	si, word [readyListHead]
	add	si, 34
	mov	word [si], 0
	jmp	L_yak_142
L_yak_141:
	; >>>>> Line:	498
	; >>>>> }else if(runningTCB->nextTCB == ((void *) 0)){ 
	mov	si, word [runningTCB]
	add	si, 32
	mov	ax, word [si]
	test	ax, ax
	jne	L_yak_143
	; >>>>> Line:	499
	; >>>>> runningTCB->prevTCB->nextTCB = ((void *) 0); 
	mov	si, word [runningTCB]
	add	si, 34
	mov	si, word [si]
	add	si, 32
	mov	word [si], 0
	jmp	L_yak_144
L_yak_143:
	; >>>>> Line:	501
	; >>>>> runningTCB->prevTCB->nextTCB = runningTCB->nextTCB; 
	mov	si, word [runningTCB]
	add	si, 32
	mov	di, word [runningTCB]
	add	di, 34
	mov	di, word [di]
	add	di, 32
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	502
	; >>>>> runningTCB->nextTCB->prevTCB = runningTCB->prevTCB; 
	mov	si, word [runningTCB]
	add	si, 34
	mov	di, word [runningTCB]
	add	di, 32
	mov	di, word [di]
	add	di, 34
	mov	ax, word [si]
	mov	word [di], ax
L_yak_144:
L_yak_142:
L_yak_140:
	; >>>>> Line:	506
	; >>>>> if(pendingListHead == ((void *) 0)){ 
	mov	ax, word [pendingListHead]
	test	ax, ax
	jne	L_yak_145
	; >>>>> Line:	507
	; >>>>> pendingListHead = runningTCB; 
	mov	ax, word [runningTCB]
	mov	word [pendingListHead], ax
	; >>>>> Line:	508
	; >>>>> pendingListHead->prevTCB = ((void *) 0); 
	mov	si, word [pendingListHead]
	add	si, 34
	mov	word [si], 0
	; >>>>> Line:	509
	; >>>>> pendingListHead->nextTCB = ((void *) 0); 
	mov	si, word [pendingListHead]
	add	si, 32
	mov	word [si], 0
	; >>>>> Line:	511
	; >>>>> YKScheduler(0); 
	xor	ax, ax
	push	ax
	call	YKScheduler
	add	sp, 2
	; >>>>> Line:	512
	; >>>>> semaphore->value--; 
	mov	si, word [bp+4]
	dec	word [si]
	; >>>>> Line:	513
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	514
	; >>>>> return; 
	jmp	L_yak_138
L_yak_145:
	; >>>>> Line:	517
	; >>>>> while(1){ 
	jmp	L_yak_147
L_yak_146:
	; >>>>> Line:	518
	; >>>>> if(itr->nextTCB == ((void *) 0)){ 
	mov	si, word [bp-2]
	add	si, 32
	mov	ax, word [si]
	test	ax, ax
	jne	L_yak_149
	; >>>>> Line:	519
	; >>>>> itr->nextTCB = runningTCB; 
	mov	si, word [bp-2]
	add	si, 32
	mov	ax, word [runningTCB]
	mov	word [si], ax
	; >>>>> Line:	520
	; >>>>> runningTCB->prevTCB = itr; 
	mov	si, word [runningTCB]
	add	si, 34
	mov	ax, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	521
	; >>>>> runningTCB->nextTCB = ((void *) 0); 
	mov	si, word [runningTCB]
	add	si, 32
	mov	word [si], 0
	; >>>>> Line:	522
	; >>>>> break; 
	jmp	L_yak_148
L_yak_149:
	; >>>>> Line:	524
	; >>>>> itr = itr 
	mov	si, word [bp-2]
	add	si, 32
	mov	ax, word [si]
	mov	word [bp-2], ax
L_yak_147:
	jmp	L_yak_146
L_yak_148:
	; >>>>> Line:	527
	; >>>>> YKScheduler(0); 
	xor	ax, ax
	push	ax
	call	YKScheduler
	add	sp, 2
	; >>>>> Line:	528
	; >>>>> semaphore->value--; 
	mov	si, word [bp+4]
	dec	word [si]
	; >>>>> Line:	529
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_yak_138:
	mov	sp, bp
	pop	bp
	ret
L_yak_135:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yak_136
	ALIGN	2
YKSemPost:
	; >>>>> Line:	532
	; >>>>> void YKSemPost(YKSEM *semaphore){ 
	jmp	L_yak_151
L_yak_152:
	; >>>>> Line:	538
	; >>>>> YKEnterMutex(); 
	mov	word [bp-10], 0
	; >>>>> Line:	538
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	545
	; >>>>> semaphore->value++; 
	mov	si, word [bp+4]
	inc	word [si]
	; >>>>> Line:	549
	; >>>>> if(pendingListHead == ((void *) 0)){ 
	mov	ax, word [pendingListHead]
	test	ax, ax
	jne	L_yak_153
	; >>>>> Line:	550
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	551
	; >>>>> return; 
	jmp	L_yak_154
L_yak_153:
	; >>>>> Line:	554
	; >>>>> while(1){ 
	jmp	L_yak_156
L_yak_155:
	; >>>>> Line:	555
	; >>>>> itr = pendingListHead; 
	mov	ax, word [pendingListHead]
	mov	word [bp-2], ax
	; >>>>> Line:	556
	; >>>>> while(1){ 
	jmp	L_yak_159
L_yak_158:
	; >>>>> Line:	557
	; >>>>> if(itr == ((void *) 0)){ 
	mov	ax, word [bp-2]
	test	ax, ax
	jne	L_yak_161
	; >>>>> Line:	558
	; >>>>> done = 1; 
	mov	word [bp-10], 1
	; >>>>> Line:	559
	; >>>>> break; 
	jmp	L_yak_160
L_yak_161:
	; >>>>> Line:	561
	; >>>>> if(itr->pendingOn->value > 0){ 
	mov	si, word [bp-2]
	add	si, 38
	mov	si, word [si]
	cmp	word [si], 0
	jle	L_yak_162
	; >>>>> Line:	563
	; >>>>> if(itr->nextTCB == ((void *) 0) && itr->prevTCB == ((void *) 0)){ 
	mov	si, word [bp-2]
	add	si, 32
	mov	ax, word [si]
	test	ax, ax
	jne	L_yak_163
	mov	si, word [bp-2]
	add	si, 34
	mov	ax, word [si]
	test	ax, ax
	jne	L_yak_163
	; >>>>> Line:	564
	; >>>>> evTCB = itr; 
	mov	word [pendingListHead], 0
	jmp	L_yak_164
L_yak_163:
	; >>>>> Line:	565
	; >>>>> }else if(itr == pendingListHead){ 
	mov	ax, word [pendingListHead]
	cmp	ax, word [bp-2]
	jne	L_yak_165
	; >>>>> Line:	566
	; >>>>> pendingListHead = itr->nextTCB; 
	mov	si, word [bp-2]
	add	si, 32
	mov	ax, word [si]
	mov	word [pendingListHead], ax
	; >>>>> Line:	567
	; >>>>> pendingListHead->prevTCB = ((void *) 0); 
	mov	si, word [pendingListHead]
	add	si, 34
	mov	word [si], 0
	jmp	L_yak_166
L_yak_165:
	; >>>>> Line:	568
	; >>>>> }else if(itr->nextTCB == ((void *) 0)){ 
	mov	si, word [bp-2]
	add	si, 32
	mov	ax, word [si]
	test	ax, ax
	jne	L_yak_167
	; >>>>> Line:	569
	; >>>>> itr->prevTCB->nextTCB = ((void *) 0); 
	mov	si, word [bp-2]
	add	si, 34
	mov	si, word [si]
	add	si, 32
	mov	word [si], 0
	jmp	L_yak_168
L_yak_167:
	; >>>>> Line:	571
	; >>>>> itr->prevTCB->nextTCB = itr->nextTCB; 
	mov	si, word [bp-2]
	add	si, 32
	mov	di, word [bp-2]
	add	di, 34
	mov	di, word [di]
	add	di, 32
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	572
	; >>>>> itr->nextTCB->prevTCB = itr->prevTCB; 
	mov	si, word [bp-2]
	add	si, 34
	mov	di, word [bp-2]
	add	di, 32
	mov	di, word [di]
	add	di, 34
	mov	ax, word [si]
	mov	word [di], ax
L_yak_168:
L_yak_166:
L_yak_164:
	; >>>>> Line:	575
	; >>>>> temp2 = itr; 
	mov	ax, word [bp-2]
	mov	word [bp-8], ax
	; >>>>> Line:	576
	; >>>>> itr2 = readyListHead; 
	mov	ax, word [readyListHead]
	mov	word [bp-4], ax
	; >>>>> Line:	577
	; >>>>> while(1){ 
	jmp	L_yak_170
L_yak_169:
	; >>>>> Line:	578
	; >>>>> if(itr2->taskPriority >= itr->taskPriority){ 
	mov	si, word [bp-4]
	add	si, 24
	mov	di, word [bp-2]
	add	di, 24
	mov	ax, word [di]
	cmp	ax, word [si]
	ja	L_yak_172
	; >>>>> Line:	579
	; >>>>> if(itr2 == readyListHead){ 
	mov	ax, word [readyListHead]
	cmp	ax, word [bp-4]
	jne	L_yak_173
	; >>>>> Line:	580
	; >>>>> itr2->prevTCB = itr; 
	mov	si, word [bp-4]
	add	si, 34
	mov	ax, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	581
	; >>>>> itr- 
	mov	si, word [bp-2]
	add	si, 32
	mov	ax, word [bp-4]
	mov	word [si], ax
	; >>>>> Line:	582
	; >>>>> itr->prevTCB = ((void *) 0); 
	mov	si, word [bp-2]
	add	si, 34
	mov	word [si], 0
	; >>>>> Line:	583
	; >>>>> readyListHead = itr; 
	mov	ax, word [bp-2]
	mov	word [readyListHead], ax
	; >>>>> Line:	584
	; >>>>> break; 
	jmp	L_yak_171
	jmp	L_yak_174
L_yak_173:
	; >>>>> Line:	587
	; >>>>> temp = itr2->prevTCB; 
	mov	si, word [bp-4]
	add	si, 34
	mov	ax, word [si]
	mov	word [bp-6], ax
	; >>>>> Line:	588
	; >>>>> itr2->prevTCB = itr; 
	mov	si, word [bp-4]
	add	si, 34
	mov	ax, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	589
	; >>>>> itr->nextTCB = itr2; 
	mov	si, word [bp-2]
	add	si, 32
	mov	ax, word [bp-4]
	mov	word [si], ax
	; >>>>> Line:	590
	; >>>>> itr->prevTCB = temp; 
	mov	si, word [bp-2]
	add	si, 34
	mov	ax, word [bp-6]
	mov	word [si], ax
	; >>>>> Line:	591
	; >>>>> temp->nextTCB = itr; 
	mov	si, word [bp-6]
	add	si, 32
	mov	ax, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	592
	; >>>>> break; 
	jmp	L_yak_171
L_yak_174:
L_yak_172:
	; >>>>> Line:	595
	; >>>>> if(itr2->nextTCB == ((void *) 0)){ 
	mov	si, word [bp-4]
	add	si, 32
	mov	ax, word [si]
	test	ax, ax
	jne	L_yak_175
	; >>>>> Line:	596
	; >>>>> itr2->nextTCB = itr; 
	mov	si, word [bp-4]
	add	si, 32
	mov	ax, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	597
	; >>>>> itr->prevTCB = itr2; 
	mov	si, word [bp-2]
	add	si, 34
	mov	ax, word [bp-4]
	mov	word [si], ax
	; >>>>> Line:	598
	; >>>>> itr->nextTCB = ((void *) 0); 
	mov	si, word [bp-2]
	add	si, 32
	mov	word [si], 0
	; >>>>> Line:	599
	; >>>>> break; 
	jmp	L_yak_171
L_yak_175:
	; >>>>> Line:	602
	; >>>>> itr2 = itr2->nextTCB; 
	mov	si, word [bp-4]
	add	si, 32
	mov	ax, word [si]
	mov	word [bp-4], ax
L_yak_170:
	jmp	L_yak_169
L_yak_171:
	; >>>>> Line:	604
	; >>>>> itr = temp2; 
	mov	ax, word [bp-8]
	mov	word [bp-2], ax
L_yak_162:
	; >>>>> Line:	606
	; >>>>> itr = itr->nextTCB; 
	mov	si, word [bp-2]
	add	si, 32
	mov	ax, word [si]
	mov	word [bp-2], ax
L_yak_159:
	jmp	L_yak_158
L_yak_160:
	; >>>>> Line:	608
	; >>>>>  
	mov	ax, word [bp-10]
	test	ax, ax
	je	L_yak_176
	; >>>>> Line:	609
	; >>>>> break; 
	jmp	L_yak_157
L_yak_176:
L_yak_156:
	jmp	L_yak_155
L_yak_157:
	; >>>>> Line:	613
	; >>>>> if(ISRDepth == 0){ 
	mov	ax, word [ISRDepth]
	test	ax, ax
	jne	L_yak_177
	; >>>>> Line:	614
	; >>>>> YKScheduler(0); 
	xor	ax, ax
	push	ax
	call	YKScheduler
	add	sp, 2
	; >>>>> Line:	615
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	616
	; >>>>> return; 
	jmp	L_yak_154
L_yak_177:
	; >>>>> Line:	619
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_yak_154:
	mov	sp, bp
	pop	bp
	ret
L_yak_151:
	push	bp
	mov	bp, sp
	sub	sp, 10
	jmp	L_yak_152
	ALIGN	2
YKQCreate:
	; >>>>> Line:	623
	; >>>>> YKQ *YKQCreate(void **start, unsigned size){ 
	jmp	L_yak_179
L_yak_180:
	; >>>>> Line:	626
	; >>>>> for(i = 0; i < 15; i++){ 
	mov	word [bp-2], 0
	jmp	L_yak_182
L_yak_181:
	; >>>>> Line:	627
	; >>>>> if(!YKQArray[i].inUse){ 
	mov	ax, word [bp-2]
	mov	cx, 4
	shl	ax, cl
	add	ax, YKQArray
	mov	si, ax
	add	si, 4
	mov	ax, word [si]
	test	ax, ax
	jne	L_yak_185
	; >>>>> Line:	628
	; >>>>> YKQArray[i].inUse = 1; 
	mov	ax, word [bp-2]
	mov	cx, 4
	shl	ax, cl
	add	ax, YKQArray
	mov	si, ax
	add	si, 4
	mov	word [si], 1
	; >>>>> Line:	629
	; >>>>> break; 
	jmp	L_yak_183
L_yak_185:
L_yak_184:
	inc	word [bp-2]
L_yak_182:
	cmp	word [bp-2], 15
	jl	L_yak_181
L_yak_183:
	; >>>>> Line:	632
	; >>>>> YKQArray[i].size = size; 
	mov	ax, word [bp-2]
	mov	cx, 4
	shl	ax, cl
	add	ax, YKQArray
	mov	si, ax
	add	si, 2
	mov	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	633
	; >>>>> YKQArray[i].start = start; 
	mov	ax, word [bp-2]
	mov	cx, 4
	shl	ax, cl
	mov	si, ax
	add	si, YKQArray
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	639
	; >>>>> return &YKQArray[i]; 
	mov	ax, word [bp-2]
	mov	cx, 4
	shl	ax, cl
	add	ax, YKQArray
L_yak_186:
	mov	sp, bp
	pop	bp
	ret
L_yak_179:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yak_180
	ALIGN	2
subIndex:
	; >>>>> Line:	643
	; >>>>> static int subIndex(int index, unsigned size){ 
	jmp	L_yak_188
L_yak_189:
	; >>>>> Line:	644
	; >>>>> if((index - 1) < 0){ 
	mov	ax, word [bp+4]
	dec	ax
	test	ax, ax
	jge	L_yak_190
	; >>>>> Line:	645
	; >>>>> return size - 1; 
	mov	ax, word [bp+6]
	dec	ax
	jmp	L_yak_191
L_yak_190:
	; >>>>> Line:	647
	; >>>>> return index - 1; 
	mov	ax, word [bp+4]
	dec	ax
L_yak_191:
	mov	sp, bp
	pop	bp
	ret
L_yak_188:
	push	bp
	mov	bp, sp
	jmp	L_yak_189
	ALIGN	2
addIndex:
	; >>>>> Line:	650
	; >>>>> static int addIndex(int index, unsigned size){ 
	jmp	L_yak_193
L_yak_194:
	; >>>>> Line:	651
	; >>>>> if((index + 1) >= size){ 
	mov	ax, word [bp+4]
	inc	ax
	mov	dx, word [bp+6]
	cmp	dx, ax
	ja	L_yak_195
	; >>>>> Line:	652
	; >>>>> return 0; 
	xor	ax, ax
	jmp	L_yak_196
L_yak_195:
	; >>>>> Line:	654
	; >>>>> return index + 1; 
	mov	ax, word [bp+4]
	inc	ax
L_yak_196:
	mov	sp, bp
	pop	bp
	ret
L_yak_193:
	push	bp
	mov	bp, sp
	jmp	L_yak_194
	ALIGN	2
isQueueEmpty:
	; >>>>> Line:	657
	; >>>>> static int isQueueEmpty(YKQ* queue){ 
	jmp	L_yak_198
L_yak_199:
	; >>>>> Line:	658
	; >>>>> if(addIndex(queue->front, queue->size) == queue->rear){ 
	mov	si, word [bp+4]
	add	si, 2
	push	word [si]
	mov	si, word [bp+4]
	add	si, 10
	push	word [si]
	call	addIndex
	add	sp, 4
	mov	si, word [bp+4]
	add	si, 12
	mov	dx, word [si]
	cmp	dx, ax
	jne	L_yak_200
	; >>>>> Line:	660
	; >>>>> return 1; 
	mov	ax, 1
	jmp	L_yak_201
	jmp	L_yak_202
L_yak_200:
	; >>>>> Line:	662
	; >>>>> return 0; 
	xor	ax, ax
L_yak_202:
L_yak_201:
	mov	sp, bp
	pop	bp
	ret
L_yak_198:
	push	bp
	mov	bp, sp
	jmp	L_yak_199
	ALIGN	2
writeToAddress:
	; >>>>> Line:	665
	; >>>>> static void writeToAddress(void* data, void * addr){ 
	jmp	L_yak_204
L_yak_205:
	; >>>>> Line:	675
	; >>>>> *p_reg = data; 
	mov	ax, word [bp+6]
	mov	word [bp-2], ax
	; >>>>> Line:	675
	; >>>>> *p_reg = data; 
	mov	si, word [bp-2]
	mov	ax, word [bp+4]
	mov	word [si], ax
	mov	sp, bp
	pop	bp
	ret
L_yak_204:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yak_205
	ALIGN	2
readFromAddress:
	; >>>>> Line:	679
	; >>>>> static int readFromAddress(int addr){ 
	jmp	L_yak_207
L_yak_208:
	; >>>>> Line:	681
	; >>>>> return *p; 
	mov	ax, word [bp+4]
	mov	word [bp-2], ax
	; >>>>> Line:	681
	; >>>>> return *p; 
	mov	si, word [bp-2]
	mov	ax, word [si]
L_yak_209:
	mov	sp, bp
	pop	bp
	ret
L_yak_207:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yak_208
	ALIGN	2
pushOnQueue:
	; >>>>> Line:	686
	; >>>>> static void pushOnQueue(YKQ* queue, int* success, void* message){ 
	jmp	L_yak_211
L_yak_212:
	; >>>>> Line:	687
	; >>>>> if(addIndex(queue->rear, queue->size) == queue->fr 
	mov	si, word [bp+4]
	add	si, 2
	push	word [si]
	mov	si, word [bp+4]
	add	si, 12
	push	word [si]
	call	addIndex
	add	sp, 4
	mov	si, word [bp+4]
	add	si, 10
	mov	dx, word [si]
	cmp	dx, ax
	jne	L_yak_213
	; >>>>> Line:	689
	; >>>>> *success = 0; 
	mov	si, word [bp+6]
	mov	word [si], 0
	; >>>>> Line:	690
	; >>>>> return; 
	jmp	L_yak_214
L_yak_213:
	; >>>>> Line:	693
	; >>>>> writeToAddress(message, (int)queue->start + queue->rear*sizeof(void*)); 
	mov	si, word [bp+4]
	add	si, 12
	mov	ax, word [si]
	shl	ax, 1
	mov	si, word [bp+4]
	add	ax, word [si]
	push	ax
	push	word [bp+8]
	call	writeToAddress
	add	sp, 4
	; >>>>> Line:	695
	; >>>>> queue->rear = addIndex(queue->rear, queue->size); 
	mov	si, word [bp+4]
	add	si, 2
	push	word [si]
	mov	si, word [bp+4]
	add	si, 12
	push	word [si]
	call	addIndex
	add	sp, 4
	mov	si, word [bp+4]
	add	si, 12
	mov	word [si], ax
	; >>>>> Line:	696
	; >>>>> *success = 1; 
	mov	si, word [bp+6]
	mov	word [si], 1
L_yak_214:
	; >>>>> Line:	697
	; >>>>> return; 
	mov	sp, bp
	pop	bp
	ret
L_yak_211:
	push	bp
	mov	bp, sp
	jmp	L_yak_212
	ALIGN	2
popOffQueue:
	; >>>>> Line:	701
	; >>>>> static void popOffQueue(YKQ* queue, int* success, void** result){ 
	jmp	L_yak_216
L_yak_217:
	; >>>>> Line:	703
	; >>>>> if(queue->front == queue->rear){ 
	mov	si, word [bp+4]
	add	si, 10
	mov	di, word [bp+4]
	add	di, 12
	mov	ax, word [di]
	cmp	ax, word [si]
	jne	L_yak_218
	; >>>>> Line:	705
	; >>>>> *success = 0; 
	mov	si, word [bp+6]
	mov	word [si], 0
	; >>>>> Line:	706
	; >>>>> return; 
	jmp	L_yak_219
L_yak_218:
	; >>>>> Line:	709
	; >>>>> *result = (void*)readFromAddress((int)queue->start + queue->front*sizeof(void*)); 
	mov	si, word [bp+4]
	add	si, 10
	mov	ax, word [si]
	shl	ax, 1
	mov	si, word [bp+4]
	add	ax, word [si]
	push	ax
	call	readFromAddress
	add	sp, 2
	mov	si, word [bp+8]
	mov	word [si], ax
	; >>>>> Line:	717
	; >>>>> queue->front = addIndex(queue->front, queue->size); 
	mov	si, word [bp+4]
	add	si, 2
	push	word [si]
	mov	si, word [bp+4]
	add	si, 10
	push	word [si]
	call	addIndex
	add	sp, 4
	mov	si, word [bp+4]
	add	si, 10
	mov	word [si], ax
	; >>>>> Line:	718
	; >>>>> *success = 1; 
	mov	si, word [bp+6]
	mov	word [si], 1
L_yak_219:
	; >>>>> Line:	719
	; >>>>> return; 
	mov	sp, bp
	pop	bp
	ret
L_yak_216:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yak_217
L_yak_226:
	DB	" Data: ",0
L_yak_225:
	DB	" inUse: ",0
L_yak_224:
	DB	" rear: ",0
L_yak_223:
	DB	" front: ",0
L_yak_222:
	DB	" size: ",0
L_yak_221:
	DB	"Queue contents: id: ",0
	ALIGN	2
printQueue:
	; >>>>> Line:	722
	; >>>>> on initia 
	jmp	L_yak_227
L_yak_228:
	; >>>>> Line:	723
	; >>>>> printString("Queue contents: id: "); 
	mov	ax, L_yak_221
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	724
	; >>>>> printInt(queue->id); 
	mov	si, word [bp+4]
	add	si, 6
	push	word [si]
	call	printInt
	add	sp, 2
	; >>>>> Line:	725
	; >>>>> printString(" size: "); 
	mov	ax, L_yak_222
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	726
	; >>>>> printInt(queue->size); 
	mov	si, word [bp+4]
	add	si, 2
	push	word [si]
	call	printInt
	add	sp, 2
	; >>>>> Line:	727
	; >>>>> printString(" front: "); 
	mov	ax, L_yak_223
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	728
	; >>>>> printInt(queue->front); 
	mov	si, word [bp+4]
	add	si, 10
	push	word [si]
	call	printInt
	add	sp, 2
	; >>>>> Line:	729
	; >>>>> printString(" rear: "); 
	mov	ax, L_yak_224
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	730
	; >>>>> printInt(queue->rear); 
	mov	si, word [bp+4]
	add	si, 12
	push	word [si]
	call	printInt
	add	sp, 2
	; >>>>> Line:	731
	; >>>>> printString(" inUse: "); 
	mov	ax, L_yak_225
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	732
	; >>>>> printInt(queue->inUse); 
	mov	si, word [bp+4]
	add	si, 4
	push	word [si]
	call	printInt
	add	sp, 2
	; >>>>> Line:	733
	; >>>>> printString(" Data: "); 
	mov	ax, L_yak_226
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	734
	; >>>>> printInt((int)queue->start); 
	mov	si, word [bp+4]
	push	word [si]
	call	printInt
	add	sp, 2
	; >>>>> Line:	735
	; >>>>> printString("\r\n"); 
	mov	ax, L_yak_4
	push	ax
	call	printString
	add	sp, 2
	mov	sp, bp
	pop	bp
	ret
L_yak_227:
	push	bp
	mov	bp, sp
	jmp	L_yak_228
L_yak_231:
	DB	"Failed to pop even after pending!!!!",0xD,0xA,0
L_yak_230:
	DB	"Trying to use a non initialized queue!!!!",0xD,0xA,0
	ALIGN	2
YKQPend:
	; >>>>> Line:	738
	; >>>>> void *YKQPend(YKQ *queue){ 
	jmp	L_yak_232
L_yak_233:
	; >>>>> Line:	741
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	746
	; >>>>> if(!queue->inUse){ 
	mov	si, word [bp+4]
	add	si, 4
	mov	ax, word [si]
	test	ax, ax
	jne	L_yak_234
	; >>>>> Line:	747
	; >>>>> printString("Trying to use a non initia 
	mov	ax, L_yak_230
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	748
	; >>>>> exit(0); 
	xor	al, al
	push	ax
	call	exit
	add	sp, 2
L_yak_234:
	; >>>>> Line:	750
	; >>>>> popOffQueue(queue, &success, &tempMessage); 
	lea	ax, [bp-2]
	push	ax
	lea	ax, [bp-4]
	push	ax
	push	word [bp+4]
	call	popOffQueue
	add	sp, 6
	; >>>>> Line:	752
	; >>>>> if(!success){ 
	mov	ax, word [bp-4]
	test	ax, ax
	jne	L_yak_235
	; >>>>> Line:	758
	; >>>>> queue->numberPendingOn++; 
	mov	si, word [bp+4]
	add	si, 14
	inc	word [si]
	; >>>>> Line:	759
	; >>>>> YKSemPend(queue->semaphore); 
	mov	si, word [bp+4]
	add	si, 8
	push	word [si]
	call	YKSemPend
	add	sp, 2
	; >>>>> Line:	760
	; >>>>> popOffQueue(queue, &success, &tempMessage); 
	lea	ax, [bp-2]
	push	ax
	lea	ax, [bp-4]
	push	ax
	push	word [bp+4]
	call	popOffQueue
	add	sp, 6
	; >>>>> Line:	761
	; >>>>> if(!success){ 
	mov	ax, word [bp-4]
	test	ax, ax
	jne	L_yak_236
	; >>>>> Line:	762
	; >>>>> printString("Failed to pop even after pending!!!!\r\n"); 
	mov	ax, L_yak_231
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	763
	; >>>>> exit(0); 
	xor	al, al
	push	ax
	call	exit
	add	sp, 2
L_yak_236:
L_yak_235:
	; >>>>> Line:	768
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	769
	; >>>>> return tempMessage; 
	mov	ax, word [bp-2]
L_yak_237:
	mov	sp, bp
	pop	bp
	ret
L_yak_232:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_yak_233
	ALIGN	2
YKQPost:
	; >>>>> Line:	773
	; >>>>> int YKQPost(YKQ *queue, void *msg){ 
	jmp	L_yak_239
L_yak_240:
	; >>>>> Line:	778
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	785
	; >>>>> if(!queue->inUse){ 
	mov	si, word [bp+4]
	add	si, 4
	mov	ax, word [si]
	test	ax, ax
	jne	L_yak_241
	; >>>>> Line:	786
	; >>>>> printString("Trying to use a non initialized queue!!!!\r\n"); 
	mov	ax, L_yak_230
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	787
	; >>>>> ex 
	xor	al, al
	push	ax
	call	exit
	add	sp, 2
L_yak_241:
	; >>>>> Line:	789
	; >>>>> pushOnQueue(queue, &success, msg); 
	push	word [bp+6]
	lea	ax, [bp-2]
	push	ax
	push	word [bp+4]
	call	pushOnQueue
	add	sp, 6
	; >>>>> Line:	790
	; >>>>> if(success){ 
	mov	ax, word [bp-2]
	test	ax, ax
	je	L_yak_242
	; >>>>> Line:	792
	; >>>>> if(queue->numberPendingOn > 0){ 
	mov	si, word [bp+4]
	add	si, 14
	cmp	word [si], 0
	jle	L_yak_243
	; >>>>> Line:	793
	; >>>>> queue->numberPendingOn--; 
	mov	si, word [bp+4]
	add	si, 14
	dec	word [si]
	; >>>>> Line:	794
	; >>>>> YKSemPost(queue->semaphore); 
	mov	si, word [bp+4]
	add	si, 8
	push	word [si]
	call	YKSemPost
	add	sp, 2
L_yak_243:
	; >>>>> Line:	796
	; >>>>> if(ISRDepth == 0){ 
	mov	ax, word [ISRDepth]
	test	ax, ax
	jne	L_yak_244
	; >>>>> Line:	797
	; >>>>> YKScheduler(0); 
	xor	ax, ax
	push	ax
	call	YKScheduler
	add	sp, 2
L_yak_244:
	; >>>>> Line:	799
	; >>>>> return 1; 
	mov	ax, 1
	jmp	L_yak_245
L_yak_242:
	; >>>>> Line:	802
	; >>>>> if(ISRDepth == 0){ 
	mov	ax, word [ISRDepth]
	test	ax, ax
	jne	L_yak_246
	; >>>>> Line:	803
	; >>>>> YKScheduler(0); 
	xor	ax, ax
	push	ax
	call	YKScheduler
	add	sp, 2
L_yak_246:
	; >>>>> Line:	805
	; >>>>> return 0; 
	xor	ax, ax
L_yak_245:
	mov	sp, bp
	pop	bp
	ret
L_yak_239:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yak_240
	ALIGN	2
YKEventCreate:
	; >>>>> Line:	808
	; >>>>> YKEVENT *YKEventCreate(unsigned initialValue){ 
	jmp	L_yak_248
L_yak_249:
	; >>>>> Line:	811
	; >>>>> for(i = 0; i < 15; i++){ 
	mov	word [bp-2], 0
	jmp	L_yak_251
L_yak_250:
	; >>>>> Line:	812
	; >>>>> if(!YKEVENTArray[i].inUse){ 
	mov	ax, word [bp-2]
	mov	cx, 3
	shl	ax, cl
	add	ax, YKEVENTArray
	mov	si, ax
	add	si, 4
	mov	ax, word [si]
	test	ax, ax
	jne	L_yak_254
	; >>>>> Line:	813
	; >>>>> YKEVENTArray[i].inUse = 1; 
	mov	ax, word [bp-2]
	mov	cx, 3
	shl	ax, cl
	add	ax, YKEVENTArray
	mov	si, ax
	add	si, 4
	mov	word [si], 1
	; >>>>> Line:	814
	; >>>>> break; 
	jmp	L_yak_252
L_yak_254:
L_yak_253:
	inc	word [bp-2]
L_yak_251:
	cmp	word [bp-2], 15
	jl	L_yak_250
L_yak_252:
	; >>>>> Line:	817
	; >>>>> YKEVENTArray[i].value = initialValue; 
	mov	ax, word [bp-2]
	mov	cx, 3
	shl	ax, cl
	mov	si, ax
	add	si, YKEVENTArray
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	818
	; >>>>> return &YKEVENTArray[i]; 
	mov	ax, word [bp-2]
	mov	cx, 3
	shl	ax, cl
	add	ax, YKEVENTArray
L_yak_255:
	mov	sp, bp
	pop	bp
	ret
L_yak_248:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yak_249
L_yak_257:
	DB	"Reached default in switch",0xD,0xA,0
	ALIGN	2
meetsConditions:
	; >>>>> Line:	821
	; >>>>> tsCondition 
	jmp	L_yak_258
L_yak_259:
	; >>>>> Line:	824
	; >>>>> switch(waitMode){ 
	mov	si, word [bp+4]
	mov	ax, word [si]
	and	ax, word [bp+6]
	mov	word [bp-2], ax
	; >>>>> Line:	824
	; >>>>> switch(waitMode){ 
	mov	ax, word [bp+8]
	dec	ax
	je	L_yak_262
	inc	ax
	je	L_yak_263
	jmp	L_yak_261
L_yak_262:
	; >>>>> Line:	826
	; >>>>> conditionMet = valueAfterMask == eventMask; 
	mov	ax, word [bp+6]
	cmp	ax, word [bp-2]
	je	L_yak_264
	xor	ax, ax
	jmp	L_yak_265
L_yak_264:
	mov	ax, 1
L_yak_265:
	mov	word [bp-4], ax
	; >>>>> Line:	827
	; >>>>> break; 
	jmp	L_yak_260
L_yak_263:
	; >>>>> Line:	829
	; >>>>> conditionMet = valueAfterMask; 
	mov	ax, word [bp-2]
	mov	word [bp-4], ax
	; >>>>> Line:	830
	; >>>>> break; 
	jmp	L_yak_260
L_yak_261:
	; >>>>> Line:	832
	; >>>>> printString("Reached default in switch\r\n"); 
	mov	ax, L_yak_257
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	833
	; >>>>> exit(0); 
	xor	al, al
	push	ax
	call	exit
	add	sp, 2
L_yak_260:
	; >>>>> Line:	837
	; >>>>> return conditionMet; 
	mov	ax, word [bp-4]
L_yak_266:
	mov	sp, bp
	pop	bp
	ret
L_yak_258:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_yak_259
	ALIGN	2
YKEventPend:
	; >>>>> Line:	843
	; >>>>> unsigned YKEventPend(YKEVENT *event, unsigned eventMask, int waitMode){ 
	jmp	L_yak_268
L_yak_269:
	; >>>>> Line:	848
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	849
	; >>>>> if(meetsCondition 
	push	word [bp+8]
	push	word [bp+6]
	push	word [bp+4]
	call	meetsConditions
	add	sp, 6
	test	ax, ax
	je	L_yak_270
	; >>>>> Line:	853
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	854
	; >>>>> return event->value; 
	mov	si, word [bp+4]
	mov	ax, word [si]
	jmp	L_yak_271
L_yak_270:
	; >>>>> Line:	856
	; >>>>> runningTCB->eventMask = eventMask; 
	mov	si, word [runningTCB]
	add	si, 40
	mov	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	857
	; >>>>> runningTCB->waitMode = waitMode; 
	mov	si, word [runningTCB]
	add	si, 42
	mov	ax, word [bp+8]
	mov	word [si], ax
	; >>>>> Line:	861
	; >>>>> if(runningTCB == readyListHead){ 
	mov	ax, word [readyListHead]
	cmp	ax, word [runningTCB]
	jne	L_yak_272
	; >>>>> Line:	862
	; >>>>> readyListHead = runningTCB->nextTCB; 
	mov	si, word [runningTCB]
	add	si, 32
	mov	ax, word [si]
	mov	word [readyListHead], ax
	; >>>>> Line:	863
	; >>>>> readyListHead->prevTCB = ((void *) 0); 
	mov	si, word [readyListHead]
	add	si, 34
	mov	word [si], 0
	jmp	L_yak_273
L_yak_272:
	; >>>>> Line:	864
	; >>>>> }else if(runningTCB->nextTCB == ((void *) 0)){ 
	mov	si, word [runningTCB]
	add	si, 32
	mov	ax, word [si]
	test	ax, ax
	jne	L_yak_274
	; >>>>> Line:	865
	; >>>>> runningTCB->prevTCB->nextTCB = ((void *) 0); 
	mov	si, word [runningTCB]
	add	si, 34
	mov	si, word [si]
	add	si, 32
	mov	word [si], 0
	jmp	L_yak_275
L_yak_274:
	; >>>>> Line:	867
	; >>>>> runningTCB->prevTCB->nextTCB = runningTCB->nextTCB; 
	mov	si, word [runningTCB]
	add	si, 32
	mov	di, word [runningTCB]
	add	di, 34
	mov	di, word [di]
	add	di, 32
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	868
	; >>>>> runningTCB->nextTCB->prevTCB = runningTCB->prevTCB; 
	mov	si, word [runningTCB]
	add	si, 34
	mov	di, word [runningTCB]
	add	di, 32
	mov	di, word [di]
	add	di, 34
	mov	ax, word [si]
	mov	word [di], ax
L_yak_275:
L_yak_273:
	; >>>>> Line:	873
	; >>>>> if(event->eventPendingListHea 
	mov	si, word [bp+4]
	add	si, 6
	mov	ax, word [si]
	test	ax, ax
	jne	L_yak_276
	; >>>>> Line:	874
	; >>>>> event->eventPendingListHead = runningTCB; 
	mov	si, word [bp+4]
	add	si, 6
	mov	ax, word [runningTCB]
	mov	word [si], ax
	; >>>>> Line:	875
	; >>>>> event->eventPendingListHead->prevTCB = ((void *) 0); 
	mov	si, word [bp+4]
	add	si, 6
	mov	si, word [si]
	add	si, 34
	mov	word [si], 0
	; >>>>> Line:	876
	; >>>>> event->eventPendingListHead->nextTCB = ((void *) 0); 
	mov	si, word [bp+4]
	add	si, 6
	mov	si, word [si]
	add	si, 32
	mov	word [si], 0
	; >>>>> Line:	877
	; >>>>> if(isRunning){ 
	mov	ax, word [isRunning]
	test	ax, ax
	je	L_yak_277
	; >>>>> Line:	878
	; >>>>> YKScheduler(0); 
	xor	ax, ax
	push	ax
	call	YKScheduler
	add	sp, 2
L_yak_277:
	; >>>>> Line:	880
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	881
	; >>>>> return event->value; 
	mov	si, word [bp+4]
	mov	ax, word [si]
	jmp	L_yak_271
L_yak_276:
	; >>>>> Line:	883
	; >>>>> itr = event->eventPendingListHead; 
	mov	si, word [bp+4]
	add	si, 6
	mov	ax, word [si]
	mov	word [bp-2], ax
	; >>>>> Line:	884
	; >>>>> while(1){ 
	jmp	L_yak_279
L_yak_278:
	; >>>>> Line:	885
	; >>>>> if(itr->nextTCB == ((void *) 0)){ 
	mov	si, word [bp-2]
	add	si, 32
	mov	ax, word [si]
	test	ax, ax
	jne	L_yak_281
	; >>>>> Line:	886
	; >>>>> itr->nextTCB = runningTCB; 
	mov	si, word [bp-2]
	add	si, 32
	mov	ax, word [runningTCB]
	mov	word [si], ax
	; >>>>> Line:	887
	; >>>>> runningTCB->prevTCB = itr; 
	mov	si, word [runningTCB]
	add	si, 34
	mov	ax, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	888
	; >>>>> runningTCB->nextTCB = ((void *) 0); 
	mov	si, word [runningTCB]
	add	si, 32
	mov	word [si], 0
	; >>>>> Line:	889
	; >>>>> if(isRunning){ 
	mov	ax, word [isRunning]
	test	ax, ax
	je	L_yak_282
	; >>>>> Line:	890
	; >>>>> YKScheduler(0); 
	xor	ax, ax
	push	ax
	call	YKScheduler
	add	sp, 2
L_yak_282:
	; >>>>> Line:	892
	; >>>>> break; 
	jmp	L_yak_280
L_yak_281:
	; >>>>> Line:	895
	; >>>>> itr = itr->ne 
	mov	si, word [bp-2]
	add	si, 32
	mov	ax, word [si]
	mov	word [bp-2], ax
L_yak_279:
	jmp	L_yak_278
L_yak_280:
	; >>>>> Line:	897
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	898
	; >>>>> return event->value; 
	mov	si, word [bp+4]
	mov	ax, word [si]
L_yak_271:
	mov	sp, bp
	pop	bp
	ret
L_yak_268:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yak_269
	ALIGN	2
YKEventSet:
	; >>>>> Line:	901
	; >>>>> void YKEventSet(YKEVENT *event, unsigned eventMask){ 
	jmp	L_yak_284
L_yak_285:
	; >>>>> Line:	908
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	915
	; >>>>> event->value = event->value | eventMask; 
	mov	si, word [bp+4]
	mov	ax, word [si]
	or	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	918
	; >>>>> if(event->eventPendingListHead == ((void *) 0)){ 
	mov	si, word [bp+4]
	add	si, 6
	mov	ax, word [si]
	test	ax, ax
	jne	L_yak_286
	; >>>>> Line:	922
	; >>>>> if(ISRDepth == 0){ 
	mov	ax, word [ISRDepth]
	test	ax, ax
	jne	L_yak_287
	; >>>>> Line:	924
	; >>>>> YKScheduler(0); 
	xor	ax, ax
	push	ax
	call	YKScheduler
	add	sp, 2
	; >>>>> Line:	925
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	926
	; >>>>> return; 
	jmp	L_yak_288
L_yak_287:
	; >>>>> Line:	928
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	929
	; >>>>> return; 
	jmp	L_yak_288
L_yak_286:
	; >>>>> Line:	932
	; >>>>> while(1){ 
	jmp	L_yak_290
L_yak_289:
	; >>>>> Line:	933
	; >>>>> itr = event->eventPendingListHead; 
	mov	si, word [bp+4]
	add	si, 6
	mov	ax, word [si]
	mov	word [bp-2], ax
	; >>>>> Line:	934
	; >>>>> while(1){ 
	jmp	L_yak_293
L_yak_292:
	; >>>>> Line:	935
	; >>>>> removedOne = 0; 
	mov	word [bp-10], 0
	; >>>>> Line:	936
	; >>>>> if(itr == ((void *) 0)){ 
	mov	ax, word [bp-2]
	test	ax, ax
	jne	L_yak_295
	; >>>>> Line:	937
	; >>>>> done = 1; 
	mov	word [bp-12], 1
	; >>>>> Line:	938
	; >>>>> break; 
	jmp	L_yak_294
L_yak_295:
	; >>>>> Line:	941
	; >>>>> if(meetsConditions(event, itr->eventMask, itr->waitMode)){ 
	mov	si, word [bp-2]
	add	si, 42
	push	word [si]
	mov	si, word [bp-2]
	add	si, 40
	push	word [si]
	push	word [bp+4]
	call	meetsConditions
	add	sp, 6
	test	ax, ax
	je	L_yak_296
	; >>>>> Line:	943
	; >>>>> if(itr->nextTCB == ((void *) 0) && itr->prevTCB == ((void *) 0)){ 
	mov	si, word [bp-2]
	add	si, 32
	mov	ax, word [si]
	test	ax, ax
	jne	L_yak_297
	mov	si, word [bp-2]
	add	si, 34
	mov	ax, word [si]
	test	ax, ax
	jne	L_yak_297
	; >>>>> Line:	944
	; >>>>> event->eventPendingListHead = ((void *) 0); 
	mov	si, word [bp+4]
	add	si, 6
	mov	word [si], 0
	jmp	L_yak_298
L_yak_297:
	; >>>>> Line:	945
	; >>>>> }else if(itr == event->eventPendingListHead){ 
	mov	si, word [bp+4]
	add	si, 6
	mov	ax, word [bp-2]
	cmp	ax, word [si]
	jne	L_yak_299
	; >>>>> Line:	946
	; >>>>> event->eventPendingListHead = itr->nextTCB; 
	mov	si, word [bp-2]
	add	si, 32
	mov	di, word [bp+4]
	add	di, 6
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	947
	; >>>>> event->eventPendingListHead->prevTCB = ((void *) 0); 
	mov	si, word [bp+4]
	add	si, 6
	mov	si, word [si]
	add	si, 34
	mov	word [si], 0
	jmp	L_yak_300
L_yak_299:
	; >>>>> Line:	948
	; >>>>> }else if(itr->nextTCB == ((void *) 0)){ 
	mov	si, word [bp-2]
	add	si, 32
	mov	ax, word [si]
	test	ax, ax
	jne	L_yak_301
	; >>>>> Line:	949
	; >>>>> itr->prevTCB->nextTCB = ((void *) 0); 
	mov	si, word [bp-2]
	add	si, 34
	mov	si, word [si]
	add	si, 32
	mov	word [si], 0
	jmp	L_yak_302
L_yak_301:
	; >>>>> Line:	951
	; >>>>> itr->prevTCB->nextTCB = itr->nextTCB; 
	mov	si, word [bp-2]
	add	si, 32
	mov	di, word [bp-2]
	add	di, 34
	mov	di, word [di]
	add	di, 32
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	952
	; >>>>>  
	mov	si, word [bp-2]
	add	si, 34
	mov	di, word [bp-2]
	add	di, 32
	mov	di, word [di]
	add	di, 34
	mov	ax, word [si]
	mov	word [di], ax
L_yak_302:
L_yak_300:
L_yak_298:
	; >>>>> Line:	955
	; >>>>> temp2 = itr; 
	mov	ax, word [bp-2]
	mov	word [bp-6], ax
	; >>>>> Line:	956
	; >>>>> itr2 = readyListHead; 
	mov	ax, word [readyListHead]
	mov	word [bp-8], ax
	; >>>>> Line:	957
	; >>>>> while(1){ 
	jmp	L_yak_304
L_yak_303:
	; >>>>> Line:	958
	; >>>>> if(itr2->taskPriority >= itr->taskPriority){ 
	mov	si, word [bp-8]
	add	si, 24
	mov	di, word [bp-2]
	add	di, 24
	mov	ax, word [di]
	cmp	ax, word [si]
	ja	L_yak_306
	; >>>>> Line:	959
	; >>>>> if(itr2 == readyListHead){ 
	mov	ax, word [readyListHead]
	cmp	ax, word [bp-8]
	jne	L_yak_307
	; >>>>> Line:	960
	; >>>>> itr2->prevTCB = itr; 
	mov	si, word [bp-8]
	add	si, 34
	mov	ax, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	961
	; >>>>> itr->nextTCB = itr2; 
	mov	si, word [bp-2]
	add	si, 32
	mov	ax, word [bp-8]
	mov	word [si], ax
	; >>>>> Line:	962
	; >>>>> itr->prevTCB = ((void *) 0); 
	mov	si, word [bp-2]
	add	si, 34
	mov	word [si], 0
	; >>>>> Line:	963
	; >>>>> readyListHead = itr; 
	mov	ax, word [bp-2]
	mov	word [readyListHead], ax
	; >>>>> Line:	964
	; >>>>> break; 
	jmp	L_yak_305
	jmp	L_yak_308
L_yak_307:
	; >>>>> Line:	967
	; >>>>> temp = itr2->prevTCB; 
	mov	si, word [bp-8]
	add	si, 34
	mov	ax, word [si]
	mov	word [bp-4], ax
	; >>>>> Line:	968
	; >>>>> itr2->prevTCB = itr; 
	mov	si, word [bp-8]
	add	si, 34
	mov	ax, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	969
	; >>>>> itr->nextTCB = itr2; 
	mov	si, word [bp-2]
	add	si, 32
	mov	ax, word [bp-8]
	mov	word [si], ax
	; >>>>> Line:	970
	; >>>>> itr->prevTCB = temp; 
	mov	si, word [bp-2]
	add	si, 34
	mov	ax, word [bp-4]
	mov	word [si], ax
	; >>>>> Line:	971
	; >>>>> temp->nextTCB = itr; 
	mov	si, word [bp-4]
	add	si, 32
	mov	ax, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	972
	; >>>>> break; 
	jmp	L_yak_305
L_yak_308:
L_yak_306:
	; >>>>> Line:	975
	; >>>>> (); 
	mov	si, word [bp-8]
	add	si, 32
	mov	ax, word [si]
	test	ax, ax
	jne	L_yak_309
	; >>>>> Line:	976
	; >>>>> itr2->nextTCB = itr; 
	mov	si, word [bp-8]
	add	si, 32
	mov	ax, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	977
	; >>>>> itr->prevTCB = itr2; 
	mov	si, word [bp-2]
	add	si, 34
	mov	ax, word [bp-8]
	mov	word [si], ax
	; >>>>> Line:	978
	; >>>>> itr->nextTCB = ((void *) 0); 
	mov	si, word [bp-2]
	add	si, 32
	mov	word [si], 0
	; >>>>> Line:	979
	; >>>>> break; 
	jmp	L_yak_305
L_yak_309:
	; >>>>> Line:	982
	; >>>>> itr2 = itr2->nextTCB; 
	mov	si, word [bp-8]
	add	si, 32
	mov	ax, word [si]
	mov	word [bp-8], ax
L_yak_304:
	jmp	L_yak_303
L_yak_305:
	; >>>>> Line:	984
	; >>>>> itr = temp2; 
	mov	ax, word [bp-6]
	mov	word [bp-2], ax
	; >>>>> Line:	985
	; >>>>> removedOne = 1; 
	mov	word [bp-10], 1
L_yak_296:
	; >>>>> Line:	988
	; >>>>> itr = itr->nextTCB; 
	mov	si, word [bp-2]
	add	si, 32
	mov	ax, word [si]
	mov	word [bp-2], ax
	; >>>>> Line:	989
	; >>>>> if(removedOne){ 
	mov	ax, word [bp-10]
	test	ax, ax
	je	L_yak_310
	; >>>>> Line:	990
	; >>>>> itr = event->eventPendingListHead; 
	mov	si, word [bp+4]
	add	si, 6
	mov	ax, word [si]
	mov	word [bp-2], ax
L_yak_310:
L_yak_293:
	jmp	L_yak_292
L_yak_294:
	; >>>>> Line:	993
	; >>>>> if(done){ 
	mov	ax, word [bp-12]
	test	ax, ax
	je	L_yak_311
	; >>>>> Line:	994
	; >>>>> break; 
	jmp	L_yak_291
L_yak_311:
L_yak_290:
	jmp	L_yak_289
L_yak_291:
	; >>>>> Line:	998
	; >>>>> if(ISRDepth == 0){ 
	mov	ax, word [ISRDepth]
	test	ax, ax
	jne	L_yak_312
	; >>>>> Line:	999
	; >>>>> YKScheduler(0); 
	xor	ax, ax
	push	ax
	call	YKScheduler
	add	sp, 2
	; >>>>> Line:	1000
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	1001
	; >>>>> return; 
	jmp	L_yak_288
L_yak_312:
	; >>>>> Line:	1004
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_yak_288:
	; >>>>> Line:	1005
	; >>>>> return; 
	mov	sp, bp
	pop	bp
	ret
L_yak_284:
	push	bp
	mov	bp, sp
	sub	sp, 12
	jmp	L_yak_285
	ALIGN	2
YKEventReset:
	; >>>>> Line:	1009
	; >>>>> void YKEventReset(YKEVENT *event, unsigned eventMask){ 
	jmp	L_yak_314
L_yak_315:
	; >>>>> Line:	1010
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	1014
	; >>>>> event->value = event->value & (~eventMask); 
	mov	ax, word [bp+6]
	not	ax
	mov	si, word [bp+4]
	and	ax, word [si]
	mov	word [si], ax
	; >>>>> Line:	1015
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	mov	sp, bp
	pop	bp
	ret
L_yak_314:
	push	bp
	mov	bp, sp
	jmp	L_yak_315
	ALIGN	2
YKCtxSwCount:
	TIMES	2 db 0
TCBArray:
	TIMES	660 db 0
YKSEMArray:
	TIMES	60 db 0
YKQArray:
	TIMES	240 db 0
YKEVENTArray:
	TIMES	120 db 0
IdleStk:
	TIMES	4096 db 0
returnToLocation:
	TIMES	2 db 0
runningTCB:
	TIMES	2 db 0
nextTCB:
	TIMES	2 db 0
dispatcher:	

	;Save context of registers (exept for sp)
	cli
	pushf
	push cs


	mov [returnToLocation], bp
	mov bp, sp
	push word[bp + 4] ;Save return address	

	mov bp, [returnToLocation]

	push ax
	push bx
	push cx
	push dx
	push si
	push di
	push es
	push ds
	push bp

	;Save sp in TCB
	mov bx, word[runningTCB]
	mov word[bx + 2], sp 
 


	;set bx to TCB to restore
	mov bx, word[nextTCB]

	;Get new stack 
	mov sp, word[bx + 2]

	;Restore registers
	pop bp
	pop ds
	pop es
	pop di
	pop si
	pop dx
	pop cx
	pop bx
	pop ax

	push bx
	mov bx, word[nextTCB]
	mov word[runningTCB], bx
	pop bx

	;The next thing on the stack is now the return address

	iret

dispatchHelperFirst:
	;Don't save anything, just dispatch nextTCB
	;Saving context would save the context from main and that's bad
	mov bx, word[nextTCB]
	
	;Get the task's stack
	mov sp, word[bx + 2]
	mov bp, sp
	
	;Push the return address, we'll use flags and cs from main for now
	pushf
	push cs
	push word[bx]
	
	iret
	

initializeStack:
	push bp
	push bx
	mov bp, sp

	mov bx, word[runningTCB]
	mov sp, word[bx + 2]

	;pushf
	push word[0x200]

	push cs

	;Push starting address
	push word[bx]

	push ax
	push bx
	push cx
	push dx
	push si
	push di
	push es
	push ds
	push bp
	
	mov bx, word[runningTCB]
	mov word[bx + 2], sp
	
	mov sp, bp
	pop bx	
	pop bp
	ret


YKEnterMutex:
	cli
	ret
YKReturn:
	pop cx
	ret
	

YKExitMutexIDLE:
	sti
	ret

YKExitMutex:
	push cx	
	mov cx, [isRunning]
	cmp cx, 0
	jp YKReturn
	pop cx
	sti
	ret
